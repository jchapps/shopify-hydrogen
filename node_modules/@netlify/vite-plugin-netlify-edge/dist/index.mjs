// src/index.ts
import fs from "fs";
import path from "path";
import glob from "fast-glob";
var staticManifestModuleId = "@static-manifest";
var resolvedStaticManifestModuleId = "\0" + staticManifestModuleId;
var edgeFunctionsDir = ".netlify/edge-functions";
var DEFAULT_FUNCTION_NAME = "handler";
var netlifyEdge = ({
  generateStaticManifest = true,
  generateEdgeFunctionsManifest = true,
  additionalStaticPaths = [],
  functionName = DEFAULT_FUNCTION_NAME
} = {}) => {
  let resolvedConfig;
  let originalPublicDir;
  return {
    name: "vite-plugin-netlify-edge",
    config(config) {
      var _a, _b;
      if ((_a = config.build) == null ? void 0 : _a.ssr) {
        originalPublicDir = config.publicDir || "public";
        (_b = config.build).outDir || (_b.outDir = path.join(edgeFunctionsDir, functionName));
        return {
          publicDir: false,
          ssr: {
            target: "webworker",
            noExternal: true
          },
          build: {
            rollupOptions: {
              output: {
                format: "es"
              }
            }
          }
        };
      }
    },
    configResolved(config) {
      resolvedConfig = config;
    },
    resolveId(id) {
      if (generateStaticManifest && id === staticManifestModuleId) {
        return resolvedStaticManifestModuleId;
      }
    },
    load(id) {
      if (generateStaticManifest && id === resolvedStaticManifestModuleId) {
        const files = glob.sync("**/*", {
          cwd: path.resolve(resolvedConfig.root, originalPublicDir)
        }).map((file) => `${resolvedConfig.base}${file}`);
        return `export default new Set(${JSON.stringify([
          ...files,
          ...additionalStaticPaths
        ])})`;
      }
    },
    writeBundle(options) {
      var _a, _b;
      if (generateEdgeFunctionsManifest && resolvedConfig.build.ssr && (((_a = options.dir) == null ? void 0 : _a.endsWith(edgeFunctionsDir)) || ((_b = options.dir) == null ? void 0 : _b.endsWith(path.join(edgeFunctionsDir, functionName))))) {
        const manifest = {
          functions: [{ function: functionName, path: "/*" }],
          version: 1
        };
        fs.writeFileSync(path.join(resolvedConfig.root, edgeFunctionsDir, "manifest.json"), JSON.stringify(manifest), "utf-8");
      }
    }
  };
};
var src_default = netlifyEdge;
export {
  src_default as default
};
