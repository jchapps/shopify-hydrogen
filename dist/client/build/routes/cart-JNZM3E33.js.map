{
  "version": 3,
  "sources": ["../../../../app/routes/cart.jsx"],
  "sourcesContent": ["import {Link, useLoaderData} from '@remix-run/react';\nimport {json} from '@shopify/remix-oxygen';\n\nimport {CartLineItems} from '~/components/Cart';\nimport {CART_QUERY} from '~/queries/cart';\nimport {CartActions, CartSummary} from '~/components/Cart';\n\nexport async function loader({context}) {\n  const cartId = await context.session.get('cartId');\n\n  const cart = cartId\n    ? (\n        await context.storefront.query(CART_QUERY, {\n          variables: {\n            cartId,\n            country: context.storefront.i18n.country,\n            language: context.storefront.i18n.language,\n          },\n          cache: context.storefront.CacheNone(),\n        })\n      ).cart\n    : null;\n\n  return {cart};\n}\n\nexport async function action({request, context}) {\n  const {session, storefront} = context;\n  const headers = new Headers();\n\n  const [formData, storedCartId, customerAccessToken] = await Promise.all([\n    request.formData(),\n    session.get('cartId'),\n    session.get('customerAccessToken'),\n  ]);\n\n  let cartId = storedCartId;\n\n  let status = 200;\n  let result;\n\n  const cartAction = formData.get('cartAction');\n  const countryCode = formData.get('countryCode')\n    ? formData.get('countryCode')\n    : null;\n\n  switch (cartAction) {\n    case 'ADD_TO_CART':\n      const lines = formData.get('lines')\n        ? JSON.parse(String(formData.get('lines')))\n        : [];\n\n      if (!cartId) {\n        result = await cartCreate({\n          input: countryCode ? {lines, buyerIdentity: {countryCode}} : {lines},\n          storefront,\n        });\n      } else {\n        result = await cartAdd({\n          cartId,\n          lines,\n          storefront,\n        });\n      }\n\n      cartId = result.cart.id;\n      break;\n    case 'REMOVE_FROM_CART':\n      const lineIds = formData.get('linesIds')\n        ? JSON.parse(String(formData.get('linesIds')))\n        : [];\n\n      if (!lineIds.length) {\n        throw new Error('No lines to remove');\n      }\n\n      result = await cartRemove({\n        cartId,\n        lineIds,\n        storefront,\n      });\n\n      cartId = result.cart.id;\n      break;\n    default:\n      throw new Error('Invalid cart action');\n  }\n\n  /**\n   * The Cart ID may change after each mutation. We need to update it each time in the session.\n   */\n  session.set('cartId', cartId);\n  headers.set('Set-Cookie', await session.commit());\n\n  const {cart, errors} = result;\n  return json({cart, errors}, {status, headers});\n}\n\nexport default function Cart() {\n  const {cart} = useLoaderData();\n\n  if (cart?.totalQuantity > 0)\n    return (\n      <div className=\"w-full max-w-6xl mx-auto pb-12 grid md:grid-cols-2 md:items-start gap-8 md:gap-8 lg:gap-12\">\n        <div className=\"flex-grow md:translate-y-4\">\n          <CartLineItems linesObj={cart.lines} />\n        </div>\n        <div className=\"fixed left-0 right-0 bottom-0 md:sticky md:top-[65px] grid gap-6 p-4 md:px-6 md:translate-y-4 bg-gray-100 rounded-md w-full\">\n          <CartSummary cost={cart.cost} />\n          <CartActions checkoutUrl={cart.checkoutUrl} />\n        </div>\n      </div>\n    );\n  return (\n    <div className=\"flex flex-col space-y-7 justify-center items-center md:py-8 md:px-12 px-4 py-6 h-screen\">\n      <h2 className=\"whitespace-pre-wrap max-w-prose font-bold text-4xl \">\n        Your cart is empty\n      </h2>\n      <Link\n        to=\"/\"\n        className=\"inline-block rounded-sm font-medium text-center py-3 px-6 max-w-xl leading-none bg-rose-200 text-white w-full\"\n      >\n        Continue shopping\n      </Link>\n    </div>\n  );\n}\n\n/**\n * Create a cart with line(s) mutation\n * @param input CartInput https://shopify.dev/api/storefront/{api_version}/input-objects/CartInput\n * @see https://shopify.dev/api/storefront/{api_version}/mutations/cartcreate\n * @returns result {cart, errors}\n * @preserve\n */\nexport async function cartCreate({input, storefront}) {\n  const {cartCreate} = await storefront.mutate(CREATE_CART_MUTATION, {\n    variables: {input},\n  });\n\n  return cartCreate;\n}\n\n/**\n * Storefront API cartLinesAdd mutation\n * @param cartId\n * @param lines [CartLineInput!]! https://shopify.dev/api/storefront/{api_version}/input-objects/CartLineInput\n * @see https://shopify.dev/api/storefront/{api_version}/mutations/cartLinesAdd\n * @returns result {cart, errors}\n * @preserve\n */\nexport async function cartAdd({cartId, lines, storefront}) {\n  const {cartLinesAdd} = await storefront.mutate(ADD_LINES_MUTATION, {\n    variables: {cartId, lines},\n  });\n\n  return cartLinesAdd;\n}\n\n/**\n * Create a cart with line(s) mutation\n * @param cartId the current cart id\n * @param lineIds [ID!]! an array of cart line ids to remove\n * @see https://shopify.dev/api/storefront/2022-07/mutations/cartlinesremove\n * @returns mutated cart\n * @preserve\n */\nexport async function cartRemove({cartId, lineIds, storefront}) {\n  const {cartLinesRemove} = await storefront.mutate(\n    REMOVE_LINE_ITEMS_MUTATION,\n    {\n      variables: {\n        cartId,\n        lineIds,\n      },\n    },\n  );\n\n  if (!cartLinesRemove) {\n    throw new Error('No data returned from remove lines mutation');\n  }\n  return cartLinesRemove;\n}\n\n/*\n  Cart Queries\n*/\n\nconst USER_ERROR_FRAGMENT = `#graphql\n  fragment ErrorFragment on CartUserError {\n    message\n    field\n    code\n  }\n`;\n\nconst LINES_CART_FRAGMENT = `#graphql\n  fragment CartLinesFragment on Cart {\n    id\n    totalQuantity\n  }\n`;\n\n//! @see: https://shopify.dev/api/storefront/{api_version}/mutations/cartcreate\nconst CREATE_CART_MUTATION = `#graphql\n  mutation ($input: CartInput!, $country: CountryCode = ZZ, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    cartCreate(input: $input) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n`;\n\nconst ADD_LINES_MUTATION = `#graphql\n  mutation ($cartId: ID!, $lines: [CartLineInput!]!, $country: CountryCode = ZZ, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...CartLinesFragment\n      }\n      errors: userErrors {\n        ...ErrorFragment\n      }\n    }\n  }\n  ${LINES_CART_FRAGMENT}\n  ${USER_ERROR_FRAGMENT}\n`;\n\nconst REMOVE_LINE_ITEMS_MUTATION = `#graphql\n  mutation ($cartId: ID!, $lineIds: [ID!]!, $language: LanguageCode, $country: CountryCode)\n  @inContext(country: $country, language: $language) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n        totalQuantity\n        lines(first: 100) {\n          edges {\n            node {\n              id\n              quantity\n              merchandise {\n                ...on ProductVariant {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      errors: userErrors {\n        message\n        field\n        code\n      }\n    }\n  }\n`;\n"],
  "mappings": "+NAyGU,IAAAA,EAAA,OAPK,SAARC,GAAwB,CAC7B,GAAM,CAAC,KAAAC,CAAI,EAAIC,EAAc,EAE7B,OAAID,GAAM,cAAgB,KAEtB,QAAC,OAAI,UAAU,6FACb,oBAAC,OAAI,UAAU,6BACb,mBAACE,EAAA,CAAc,SAAUF,EAAK,MAAO,EACvC,KACA,QAAC,OAAI,UAAU,8HACb,oBAACG,EAAA,CAAY,KAAMH,EAAK,KAAM,KAC9B,OAACI,EAAA,CAAY,YAAaJ,EAAK,YAAa,GAC9C,GACF,KAGF,QAAC,OAAI,UAAU,0FACb,oBAAC,MAAG,UAAU,sDAAsD,8BAEpE,KACA,OAACK,EAAA,CACC,GAAG,IACH,UAAU,gHACX,6BAED,GACF,CAEJ,CA8DA,IAAMC,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQtBC,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ5B,IAAMC,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYzBD;AAAA,IACAD;AAAA,EAGEG,EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYvBF;AAAA,IACAD;",
  "names": ["import_jsx_runtime", "Cart", "cart", "useLoaderData", "CartLineItems", "CartSummary", "CartActions", "Link", "USER_ERROR_FRAGMENT", "LINES_CART_FRAGMENT", "CREATE_CART_MUTATION", "ADD_LINES_MUTATION"]
}
