{
  "version": 3,
  "sources": ["../../../../node_modules/@shopify/hydrogen-react/src/storefront-api-constants.ts", "../../../../node_modules/@shopify/hydrogen-react/src/storefront-client.ts", "../../../../node_modules/@shopify/hydrogen-react/src/ShopifyProvider.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/useMoney.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/Money.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/image-size.ts", "../../../../node_modules/@shopify/hydrogen-react/src/Image.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/Video.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/ExternalVideo.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/load-script.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/ModelViewer.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/MediaFile.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/analytics-utils.ts", "../../../../node_modules/@shopify/hydrogen-react/src/ShopPayButton.tsx", "../../../../node_modules/@shopify/hydrogen-react/src/flatten-connection.ts"],
  "sourcesContent": ["export const SFAPI_VERSION = '2023-01';\n", "import {SFAPI_VERSION} from './storefront-api-constants.js';\n\ntype StorefrontClientProps = {\n  /** The host name of the domain (eg: `{shop}.myshopify.com`). */\n  storeDomain: string;\n  /** The Storefront API delegate access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) and [delegate access token](https://shopify.dev/apps/auth/oauth/delegate-access-tokens) documentation for more details. */\n  privateStorefrontToken?: string;\n  /** The Storefront API access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details. */\n  publicStorefrontToken?: string;\n  /** The Storefront API version. This should almost always be the same as the version Hydrogen React was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details.  */\n  storefrontApiVersion: string;\n  /**\n   * Customizes which `\"content-type\"` header is added when using `getPrivateTokenHeaders()` and `getPublicTokenHeaders()`. When fetching with a `JSON.stringify()`-ed `body`, use `\"json\"`. When fetching with a `body` that is a plain string, use `\"graphql\"`. Defaults to `\"json\"`\n   *\n   * Can also be customized on a call-by-call basis by passing in `'contentType'` to both `getPrivateTokenHeaders({...})` and `getPublicTokenHeaders({...})`, for example: `getPublicTokenHeaders({contentType: 'graphql'})`\n   */\n  contentType?: 'json' | 'graphql';\n};\n\n/**\n * The `createStorefrontClient()` function creates helpers that enable you to quickly query the Shopify Storefront API.\n *\n * When used on the server, it is recommended to use the `privateStorefrontToken` prop. When used on the client, it is recommended to use the `publicStorefrontToken` prop.\n */\nexport function createStorefrontClient({\n  storeDomain,\n  privateStorefrontToken,\n  publicStorefrontToken,\n  storefrontApiVersion,\n  contentType,\n}: StorefrontClientProps): StorefrontClientReturn {\n  if (storefrontApiVersion !== SFAPI_VERSION) {\n    warnOnce(\n      `StorefrontClient: The Storefront API version that you're using is different than the version this build of Hydrogen React is targeting. You may run into unexpected errors if these versions don't match. Received verion: \"${storefrontApiVersion}\"; expected version \"${SFAPI_VERSION}\"`\n    );\n  }\n\n  // only warn if not in a browser environment\n  if (__HYDROGEN_DEV__ && !privateStorefrontToken && !globalThis.document) {\n    warnOnce(\n      `StorefrontClient: Using a private storefront token is recommended for server environments. Refer to the authentication https://shopify.dev/api/storefront#authentication documentation for more details.`\n    );\n  }\n\n  // only warn if in a browser environment and you're using the privateStorefrontToken\n  if (__HYDROGEN_DEV__ && privateStorefrontToken && globalThis) {\n    warnOnce(\n      `StorefrontClient: You are attempting to use a private token in an environment where it can be easily accessed by anyone. This is a security risk; please use the public token and the 'publicStorefrontToken' prop`\n    );\n  }\n\n  return {\n    getShopifyDomain(overrideProps) {\n      return overrideProps?.storeDomain ?? storeDomain;\n    },\n    getStorefrontApiUrl(overrideProps) {\n      const finalDomainUrl = overrideProps?.storeDomain ?? storeDomain;\n      return `${finalDomainUrl}${finalDomainUrl.endsWith('/') ? '' : '/'}api/${\n        overrideProps?.storefrontApiVersion ?? storefrontApiVersion\n      }/graphql.json`;\n    },\n    getPrivateTokenHeaders(overrideProps) {\n      if (!privateStorefrontToken && !overrideProps?.privateStorefrontToken) {\n        throw new Error(\n          `StorefrontClient: You did not pass in a 'privateStorefrontToken' while using 'getPrivateTokenHeaders()'`\n        );\n      }\n\n      if (__HYDROGEN_DEV__ && !overrideProps?.buyerIp) {\n        warnOnce(\n          `StorefrontClient: it is recommended to pass in the 'buyerIp' property which improves analytics and data in the admin.`\n        );\n      }\n\n      const finalContentType = overrideProps?.contentType ?? contentType;\n\n      return {\n        // default to json\n        'content-type':\n          finalContentType === 'graphql'\n            ? 'application/graphql'\n            : 'application/json',\n        'X-SDK-Variant': 'hydrogen-react',\n        'X-SDK-Variant-Source': 'react',\n        'X-SDK-Version': storefrontApiVersion,\n        'Shopify-Storefront-Private-Token':\n          overrideProps?.privateStorefrontToken ?? privateStorefrontToken ?? '',\n        ...(overrideProps?.buyerIp\n          ? {'Shopify-Storefront-Buyer-IP': overrideProps.buyerIp}\n          : {}),\n      };\n    },\n    getPublicTokenHeaders(overrideProps) {\n      if (!publicStorefrontToken && !overrideProps?.publicStorefrontToken) {\n        throw new Error(\n          `StorefrontClient: You did not pass in a 'publicStorefrontToken' while using 'getPublicTokenHeaders()'`\n        );\n      }\n\n      const finalContentType =\n        overrideProps?.contentType ?? contentType ?? 'json';\n\n      return getPublicTokenHeadersRaw(\n        finalContentType,\n        storefrontApiVersion,\n        overrideProps?.publicStorefrontToken ?? publicStorefrontToken ?? ''\n      );\n    },\n  };\n}\n\nexport function getPublicTokenHeadersRaw(\n  contentType: 'graphql' | 'json',\n  storefrontApiVersion: string,\n  accessToken: string\n) {\n  return {\n    // default to json\n    'content-type':\n      contentType === 'graphql' ? 'application/graphql' : 'application/json',\n    'X-SDK-Variant': 'hydrogen-react',\n    'X-SDK-Variant-Source': 'react',\n    'X-SDK-Version': storefrontApiVersion,\n    'X-Shopify-Storefront-Access-Token': accessToken,\n  };\n}\n\nconst warnings = new Set<string>();\nconst warnOnce = (string: string) => {\n  if (!warnings.has(string)) {\n    console.warn(string);\n    warnings.add(string);\n  }\n};\n\ntype OverrideTokenHeaderProps = Partial<\n  Pick<StorefrontClientProps, 'contentType'>\n>;\n\ntype StorefrontClientReturn = {\n  /**\n   * Creates the fully-qualified URL to your myshopify.com domain.\n   *\n   * By default, it will use the config you passed in when calling `createStorefrontClient()`. However, you can override the following settings on each invocation of `getShopifyDomain({...})`:\n   *\n   * - `storeDomain`\n   */\n  getShopifyDomain: (\n    props?: Partial<Pick<StorefrontClientProps, 'storeDomain'>>\n  ) => string;\n  /**\n   * Creates the fully-qualified URL to your store's GraphQL endpoint.\n   *\n   * By default, it will use the config you passed in when calling `createStorefrontClient()`. However, you can override the following settings on each invocation of `getStorefrontApiUrl({...})`:\n   *\n   * - `storeDomain`\n   * - `storefrontApiVersion`\n   */\n  getStorefrontApiUrl: (\n    props?: Partial<\n      Pick<StorefrontClientProps, 'storeDomain' | 'storefrontApiVersion'>\n    >\n  ) => string;\n  /**\n   * Returns an object that contains headers that are needed for each query to Storefront API GraphQL endpoint. This method uses the private Server-to-Server token which reduces the chance of throttling but must not be exposed to clients. Server-side calls should prefer using this over `getPublicTokenHeaders()`.\n   *\n   * By default, it will use the config you passed in when calling `createStorefrontClient()`. However, you can override the following settings on each invocation of `getPrivateTokenHeaders({...})`:\n   *\n   * - `contentType`\n   * - `privateStorefrontToken`\n   * - `buyerIp`\n   *\n   * Note that `contentType` defaults to what you configured in `createStorefrontClient({...})` and defaults to `'json'`, but a specific call may require using `graphql`. When using `JSON.stringify()` on the `body`, use `'json'`; otherwise, use `'graphql'`.\n   */\n  getPrivateTokenHeaders: (\n    props?: OverrideTokenHeaderProps &\n      Pick<StorefrontClientProps, 'privateStorefrontToken'> & {\n        /**\n         * The client's IP address. Passing this to the Storefront API when using a server-to-server token will help improve your store's analytics data.\n         */\n        buyerIp?: string;\n      }\n  ) => Record<string, string>;\n  /**\n   * Returns an object that contains headers that are needed for each query to Storefront API GraphQL endpoint. This method uses the public token which increases the chance of throttling but also can be exposed to clients. Server-side calls should prefer using `getPublicTokenHeaders()`.\n   *\n   * By default, it will use the config you passed in when calling `createStorefrontClient()`. However, you can override the following settings on each invocation of `getPublicTokenHeaders({...})`:\n   *\n   * - `contentType`\n   * - `publicStorefrontToken`\n   *\n   * Note that `contentType` defaults to what you configured in `createStorefrontClient({...})` and defaults to `'json'`, but a specific call may require using `graphql`. When using `JSON.stringify()` on the `body`, use `'json'`; otherwise, use `'graphql'`.\n   */\n  getPublicTokenHeaders: (\n    props?: OverrideTokenHeaderProps &\n      Pick<StorefrontClientProps, 'publicStorefrontToken'>\n  ) => Record<string, string>;\n};\n", "import {createContext, useContext, useMemo, type ReactNode} from 'react';\nimport type {LanguageCode, CountryCode} from './storefront-api-types.js';\nimport {SFAPI_VERSION} from './storefront-api-constants.js';\nimport {getPublicTokenHeadersRaw} from './storefront-client.js';\n\nconst ShopifyContext = createContext<ShopifyContextValue>({\n  storeDomain: 'test',\n  storefrontToken: 'abc123',\n  storefrontApiVersion: SFAPI_VERSION,\n  countryIsoCode: 'US',\n  languageIsoCode: 'EN',\n  getStorefrontApiUrl() {\n    return '';\n  },\n  getPublicTokenHeaders() {\n    return {};\n  },\n  getShopifyDomain() {\n    return '';\n  },\n});\n\n/**\n * The `<ShopifyProvider/>` component enables use of the `useShop()` hook. The component should wrap your app.\n */\nexport function ShopifyProvider({\n  children,\n  ...shopifyConfig\n}: ShopifyProviderProps) {\n  if (\n    !shopifyConfig.countryIsoCode ||\n    !shopifyConfig.languageIsoCode ||\n    !shopifyConfig.storeDomain ||\n    !shopifyConfig.storefrontToken ||\n    !shopifyConfig.storefrontApiVersion\n  ) {\n    throw new Error(\n      `Please provide the necessary props to '<ShopifyProvider/>'`\n    );\n  }\n\n  if (shopifyConfig.storefrontApiVersion !== SFAPI_VERSION) {\n    console.warn(\n      `<ShopifyProvider/>: This version of Hydrogen React is built for Shopify's Storefront API version ${SFAPI_VERSION}, but it looks like you're using version ${shopifyConfig.storefrontApiVersion}. There may be issues or bugs if you use a mismatched version of Hydrogen React and the Storefront API.`\n    );\n  }\n\n  const finalConfig = useMemo<ShopifyContextValue>(() => {\n    function getShopifyDomain(overrideProps?: {storeDomain?: string}) {\n      return overrideProps?.storeDomain ?? shopifyConfig.storeDomain;\n    }\n\n    return {\n      ...shopifyConfig,\n      getPublicTokenHeaders(overrideProps) {\n        return getPublicTokenHeadersRaw(\n          overrideProps.contentType,\n          shopifyConfig.storefrontApiVersion,\n          overrideProps.storefrontToken ?? shopifyConfig.storefrontToken\n        );\n      },\n      getShopifyDomain,\n      getStorefrontApiUrl(overrideProps) {\n        const finalDomainUrl = getShopifyDomain({\n          storeDomain: overrideProps?.storeDomain ?? shopifyConfig.storeDomain,\n        });\n        return `${finalDomainUrl}${\n          finalDomainUrl.endsWith('/') ? '' : '/'\n        }api/${\n          overrideProps?.storefrontApiVersion ??\n          shopifyConfig.storefrontApiVersion\n        }/graphql.json`;\n      },\n    };\n  }, [shopifyConfig]);\n\n  return (\n    <ShopifyContext.Provider value={finalConfig}>\n      {children}\n    </ShopifyContext.Provider>\n  );\n}\n\n/**\n * Provides access to the `shopifyConfig` prop of `<ShopifyProvider/>`. Must be a descendent of `<ShopifyProvider/>`.\n */\nexport function useShop(): ShopifyContextValue {\n  const shopContext = useContext(ShopifyContext);\n  if (!shopContext) {\n    throw new Error(`'useShop()' must be a descendent of <ShopifyProvider/>`);\n  }\n  return shopContext;\n}\n\n/**\n * Shopify-specific values that are used in various Hydrogen React components and hooks.\n */\nexport type ShopifyProviderProps = {\n  /** The globally-unique identifier for the Shop */\n  storefrontId?: string;\n  /** The full domain of your Shopify storefront URL (eg: the complete string of `{subdomain}.myshopify.com`). */\n  storeDomain: string;\n  /** The Storefront API public access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details. */\n  storefrontToken: string;\n  /** The Storefront API version. This should almost always be the same as the version Hydrogen React was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details.  */\n  storefrontApiVersion: string;\n  /**\n   * The code designating a country, which generally follows ISO 3166-1 alpha-2 guidelines. If a territory doesn't have a country code value in the `CountryCode` enum, it might be considered a subdivision of another country. For example, the territories associated with Spain are represented by the country code `ES`, and the territories associated with the United States of America are represented by the country code `US`.\n   */\n  countryIsoCode: CountryCode;\n  /**\n   * `ISO 369` language codes supported by Shopify.\n   */\n  languageIsoCode: LanguageCode;\n  /** React children to render. */\n  children?: ReactNode;\n};\n\nexport type ShopifyContextValue = Omit<ShopifyProviderProps, 'children'> &\n  ShopifyContextReturn;\n\ntype ShopifyContextReturn = {\n  /**\n   * Creates the fully-qualified URL to your store's GraphQL endpoint.\n   *\n   * By default, it will use the config you passed in when creating `<ShopifyProvider/>`. However, you can override the following settings on each invocation of `getStorefrontApiUrl({...})`:\n   *\n   * - `storeDomain`\n   * - `storefrontApiVersion`\n   */\n  getStorefrontApiUrl: (props?: GetStorefrontApiUrlProps) => string;\n  /**\n   * Returns an object that contains headers that are needed for each query to Storefront API GraphQL endpoint. This uses the public Storefront API token.\n   *\n   * By default, it will use the config you passed in when creating `<ShopifyProvider/>`. However, you can override the following settings on each invocation of `getPublicTokenHeaders({...})`:\n   *\n   * - `contentType`\n   * - `storefrontToken`\n   *\n   */\n  getPublicTokenHeaders: (\n    props: GetPublicTokenHeadersProps\n  ) => Record<string, string>;\n  /**\n   * Creates the fully-qualified URL to your myshopify.com domain.\n   *\n   * By default, it will use the config you passed in when calling `<ShopifyProvider/>`. However, you can override the following settings on each invocation of `getShopifyDomain({...})`:\n   *\n   * - `storeDomain`\n   */\n  getShopifyDomain: (props?: GetShopifyDomainProps) => string;\n};\n\ntype GetStorefrontApiUrlProps = {\n  /** The host name of the domain (eg: `{shop}.myshopify.com`). */\n  storeDomain?: string;\n  /** The Storefront API version. This should almost always be the same as the version Hydrogen-UI was built for. Learn more about Shopify [API versioning](https://shopify.dev/api/usage/versioning) for more details. */\n  storefrontApiVersion?: string;\n};\n\ntype GetPublicTokenHeadersProps = {\n  /**\n   * Customizes which `\"content-type\"` header is added when using `getPrivateTokenHeaders()` and `getPublicTokenHeaders()`. When fetching with a `JSON.stringify()`-ed `body`, use `\"json\"`. When fetching with a `body` that is a plain string, use `\"graphql\"`. Defaults to `\"json\"`\n   */\n  contentType: 'json' | 'graphql';\n  /** The Storefront API access token. Refer to the [authentication](https://shopify.dev/api/storefront#authentication) documentation for more details. */\n  storefrontToken?: string;\n};\n\ntype GetShopifyDomainProps = {storeDomain?: string};\n", "import {useMemo} from 'react';\nimport {useShop} from './ShopifyProvider.js';\nimport {CurrencyCode, MoneyV2} from './storefront-api-types.js';\n\nexport type UseMoneyValue = {\n  /**\n   * The currency code from the `MoneyV2` object.\n   */\n  currencyCode: CurrencyCode;\n  /**\n   * The name for the currency code, returned by `Intl.NumberFormat`.\n   */\n  currencyName?: string;\n  /**\n   * The currency symbol returned by `Intl.NumberFormat`.\n   */\n  currencySymbol?: string;\n  /**\n   * The currency narrow symbol returned by `Intl.NumberFormat`.\n   */\n  currencyNarrowSymbol?: string;\n  /**\n   * The localized amount, without any currency symbols or non-number types from the `Intl.NumberFormat.formatToParts` parts.\n   */\n  amount: string;\n  /**\n   * All parts returned by `Intl.NumberFormat.formatToParts`.\n   */\n  parts: Intl.NumberFormatPart[];\n  /**\n   * A string returned by `new Intl.NumberFormat` for the amount and currency code,\n   * using the `locale` value in the [`LocalizationProvider` component](https://shopify.dev/api/hydrogen/components/localization/localizationprovider).\n   */\n  localizedString: string;\n  /**\n   * The `MoneyV2` object provided as an argument to the hook.\n   */\n  original: MoneyV2;\n  /**\n   * A string with trailing zeros removed from the fractional part, if any exist. If there are no trailing zeros, then the fractional part remains.\n   * For example, `$640.00` turns into `$640`.\n   * `$640.42` remains `$640.42`.\n   */\n  withoutTrailingZeros: string;\n  /**\n   * A string without currency and without trailing zeros removed from the fractional part, if any exist. If there are no trailing zeros, then the fractional part remains.\n   * For example, `$640.00` turns into `640`.\n   * `$640.42` turns into `640.42`.\n   */\n  withoutTrailingZerosAndCurrency: string;\n};\n\n/**\n * The `useMoney` hook takes a [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2) and returns a\n * default-formatted string of the amount with the correct currency indicator, along with some of the parts provided by\n * [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat).\n * Uses `locale` from `ShopifyProvider`\n */\nexport function useMoney(money: MoneyV2): UseMoneyValue {\n  const {countryIsoCode, languageIsoCode} = useShop();\n  const locale = `${languageIsoCode}-${countryIsoCode}`;\n\n  if (!locale) {\n    throw new Error(\n      `useMoney(): Unable to get 'locale' from 'useShop()', which means that 'locale' was not passed to '<ShopifyProvider/>'. 'locale' is required for 'useMoney()' to work`\n    );\n  }\n\n  const amount = parseFloat(money.amount);\n\n  const options = useMemo(\n    () => ({\n      style: 'currency',\n      currency: money.currencyCode,\n    }),\n    [money.currencyCode]\n  );\n\n  const defaultFormatter = useLazyFormatter(locale, options);\n\n  const nameFormatter = useLazyFormatter(locale, {\n    ...options,\n    currencyDisplay: 'name',\n  });\n\n  const narrowSymbolFormatter = useLazyFormatter(locale, {\n    ...options,\n    currencyDisplay: 'narrowSymbol',\n  });\n\n  const withoutTrailingZerosFormatter = useLazyFormatter(locale, {\n    ...options,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  const withoutCurrencyFormatter = useLazyFormatter(locale);\n\n  const withoutTrailingZerosOrCurrencyFormatter = useLazyFormatter(locale, {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  const isPartCurrency = (part: Intl.NumberFormatPart) =>\n    part.type === 'currency';\n\n  // By wrapping these properties in functions, we only\n  // create formatters if they are going to be used.\n  const lazyFormatters = useMemo(\n    () => ({\n      original: () => money,\n      currencyCode: () => money.currencyCode,\n\n      localizedString: () => defaultFormatter().format(amount),\n\n      parts: () => defaultFormatter().formatToParts(amount),\n\n      withoutTrailingZeros: () =>\n        amount % 1 === 0\n          ? withoutTrailingZerosFormatter().format(amount)\n          : defaultFormatter().format(amount),\n\n      withoutTrailingZerosAndCurrency: () =>\n        amount % 1 === 0\n          ? withoutTrailingZerosOrCurrencyFormatter().format(amount)\n          : withoutCurrencyFormatter().format(amount),\n\n      currencyName: () =>\n        nameFormatter().formatToParts(amount).find(isPartCurrency)?.value ??\n        money.currencyCode, // e.g. \"US dollars\"\n\n      currencySymbol: () =>\n        defaultFormatter().formatToParts(amount).find(isPartCurrency)?.value ??\n        money.currencyCode, // e.g. \"USD\"\n\n      currencyNarrowSymbol: () =>\n        narrowSymbolFormatter().formatToParts(amount).find(isPartCurrency)\n          ?.value ?? '', // e.g. \"$\"\n\n      amount: () =>\n        defaultFormatter()\n          .formatToParts(amount)\n          .filter((part) =>\n            ['decimal', 'fraction', 'group', 'integer', 'literal'].includes(\n              part.type\n            )\n          )\n          .map((part) => part.value)\n          .join(''),\n    }),\n    [\n      money,\n      amount,\n      nameFormatter,\n      defaultFormatter,\n      narrowSymbolFormatter,\n      withoutCurrencyFormatter,\n      withoutTrailingZerosFormatter,\n      withoutTrailingZerosOrCurrencyFormatter,\n    ]\n  );\n\n  // Call functions automatically when the properties are accessed\n  // to keep these functions as an implementation detail.\n  return useMemo(\n    () =>\n      new Proxy(lazyFormatters as unknown as UseMoneyValue, {\n        get: (target, key) => Reflect.get(target, key)?.call(null),\n      }),\n    [lazyFormatters]\n  );\n}\n\nfunction useLazyFormatter(locale: string, options?: Intl.NumberFormatOptions) {\n  return useMemo(() => {\n    let memoized: Intl.NumberFormat;\n    return () => (memoized ??= new Intl.NumberFormat(locale, options));\n  }, [locale, options]);\n}\n", "import {type ReactNode} from 'react';\nimport {useMoney} from './useMoney.js';\nimport type {MoneyV2, UnitPriceMeasurement} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\n\ninterface CustomProps<ComponentGeneric extends React.ElementType> {\n  /** An HTML tag or React Component to be rendered as the base element wrapper. The default is `div`. */\n  as?: ComponentGeneric;\n  /** An object with fields that correspond to the Storefront API's [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2). */\n  data: PartialDeep<MoneyV2, {recurseIntoArrays: true}>;\n  /** Whether to remove the currency symbol from the output. */\n  withoutCurrency?: boolean;\n  /** Whether to remove trailing zeros (fractional money) from the output. */\n  withoutTrailingZeros?: boolean;\n  /** A [UnitPriceMeasurement object](https://shopify.dev/api/storefront/latest/objects/unitpricemeasurement). */\n  measurement?: PartialDeep<UnitPriceMeasurement, {recurseIntoArrays: true}>;\n  /** Customizes the separator between the money output and the measurement output. Used with the `measurement` prop. Defaults to `'/'`. */\n  measurementSeparator?: ReactNode;\n}\n\n// This article helps understand the typing here https://www.benmvp.com/blog/polymorphic-react-components-typescript/ Ben is the best :)\nexport type MoneyProps<ComponentGeneric extends React.ElementType> =\n  CustomProps<ComponentGeneric> &\n    Omit<\n      React.ComponentPropsWithoutRef<ComponentGeneric>,\n      keyof CustomProps<ComponentGeneric>\n    >;\n\n/**\n * The `Money` component renders a string of the Storefront API's\n * [MoneyV2 object](https://shopify.dev/api/storefront/reference/common-objects/moneyv2) according to the\n * `locale` in the `ShopifyProvider` component.\n */\nexport function Money<ComponentGeneric extends React.ElementType = 'div'>({\n  data,\n  as,\n  withoutCurrency,\n  withoutTrailingZeros,\n  measurement,\n  measurementSeparator = '/',\n  ...passthroughProps\n}: MoneyProps<ComponentGeneric>) {\n  if (!isMoney(data)) {\n    throw new Error(\n      `<Money/> needs a valid 'data' prop that has 'amount' and 'currencyCode'`\n    );\n  }\n  const moneyObject = useMoney(data);\n  const Wrapper = as ?? 'div';\n\n  let output = moneyObject.localizedString;\n\n  if (withoutCurrency || withoutTrailingZeros) {\n    if (withoutCurrency && !withoutTrailingZeros) {\n      output = moneyObject.amount;\n    } else if (!withoutCurrency && withoutTrailingZeros) {\n      output = moneyObject.withoutTrailingZeros;\n    } else {\n      // both\n      output = moneyObject.withoutTrailingZerosAndCurrency;\n    }\n  }\n\n  return (\n    <Wrapper {...passthroughProps}>\n      {output}\n      {measurement && measurement.referenceUnit && (\n        <>\n          {measurementSeparator}\n          {measurement.referenceUnit}\n        </>\n      )}\n    </Wrapper>\n  );\n}\n\n// required in order to narrow the money object down and make TS happy\nfunction isMoney(\n  maybeMoney: PartialDeep<MoneyV2, {recurseIntoArrays: true}>\n): maybeMoney is MoneyV2 {\n  return (\n    typeof maybeMoney.amount === 'string' &&\n    !!maybeMoney.amount &&\n    typeof maybeMoney.currencyCode === 'string' &&\n    !!maybeMoney.currencyCode\n  );\n}\n", "import type {Image as ImageType} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\nimport type {ShopifyLoaderOptions, ShopifyLoaderParams} from './Image.js';\n\n// TODO: Are there other CDNs missing from here?\nconst PRODUCTION_CDN_HOSTNAMES = [\n  'cdn.shopify.com',\n  'cdn.shopifycdn.net',\n  'shopify-assets.shopifycdn.com',\n  'shopify-assets.shopifycdn.net',\n];\nconst LOCAL_CDN_HOSTNAMES = ['spin.dev'];\nconst ALL_CDN_HOSTNAMES = [...PRODUCTION_CDN_HOSTNAMES, ...LOCAL_CDN_HOSTNAMES];\n\n// based on the default width sizes used by the Shopify liquid HTML tag img_tag plus a 2560 width to account for 2k resolutions\n// reference: https://shopify.dev/api/liquid/filters/html-filters#image_tag\nexport const IMG_SRC_SET_SIZES = [352, 832, 1200, 1920, 2560];\n\n/**\n * Adds image size parameters to an image URL hosted by Shopify's CDN\n */\nexport function addImageSizeParametersToUrl({\n  src,\n  width,\n  height,\n  crop,\n  scale,\n}: ShopifyLoaderParams) {\n  const newUrl = new URL(src);\n\n  const multipliedScale = scale ?? 1;\n\n  if (width) {\n    let finalWidth: string;\n\n    if (typeof width === 'string') {\n      finalWidth = (IMG_SRC_SET_SIZES[0] * multipliedScale).toString();\n    } else {\n      finalWidth = (Number(width) * multipliedScale).toString();\n    }\n\n    newUrl.searchParams.append('width', finalWidth);\n  }\n\n  if (height && typeof height === 'number') {\n    newUrl.searchParams.append('height', (height * multipliedScale).toString());\n  }\n\n  crop && newUrl.searchParams.append('crop', crop);\n\n  // for now we intentionally leave off the scale param, and instead multiple width & height by scale instead\n  // scale && newUrl.searchParams.append('scale', scale.toString());\n\n  return newUrl.toString();\n}\n\nexport function shopifyImageLoader(params: ShopifyLoaderParams) {\n  const newSrc = new URL(params.src);\n  const isShopifyServedImage = ALL_CDN_HOSTNAMES.some((allowedHostname) =>\n    newSrc.hostname.endsWith(allowedHostname)\n  );\n\n  if (\n    !isShopifyServedImage ||\n    (!params.width && !params.height && !params.crop && !params.scale)\n  ) {\n    return params.src;\n  }\n\n  return addImageSizeParametersToUrl(params);\n}\n\ntype HtmlImageProps = React.ImgHTMLAttributes<HTMLImageElement>;\n\nexport type GetShopifyImageDimensionsProps = {\n  data: Pick<\n    PartialDeep<ImageType, {recurseIntoArrays: true}>,\n    'altText' | 'url' | 'id' | 'width' | 'height'\n  >;\n  loaderOptions?: ShopifyLoaderOptions;\n  elementProps?: {\n    width?: HtmlImageProps['width'];\n    height?: HtmlImageProps['height'];\n  };\n};\n\ntype GetShopifyImageDimensionsPropsReturn = {\n  width: number | string | null;\n  height: number | string | null;\n};\n\n/**\n * Width and height are determined using the followiing priority list:\n * 1. `loaderOptions`'s width/height\n * 2. `elementProps`'s width/height\n * 3. `data`'s width/height\n *\n * If only one of `width` or `height` are defined, then the other will attempt to be calculated based on the Image's aspect ratio,\n * provided that both `data.width` and `data.height` are available. If not, then the aspect ratio cannot be determined and the missing\n * value will reamin as `null`\n */\nexport function getShopifyImageDimensions({\n  data: sfapiImage,\n  loaderOptions,\n  elementProps,\n}: GetShopifyImageDimensionsProps): GetShopifyImageDimensionsPropsReturn {\n  let aspectRatio: number | null = null;\n\n  if (sfapiImage?.width && sfapiImage?.height) {\n    aspectRatio = sfapiImage?.width / sfapiImage?.height;\n  }\n\n  //  * 1. `loaderOptions`'s width/height\n  if (loaderOptions?.width || loaderOptions?.height) {\n    return {\n      width:\n        loaderOptions?.width ??\n        (aspectRatio && typeof loaderOptions.height === 'number'\n          ? Math.round(aspectRatio * loaderOptions.height)\n          : null),\n      height:\n        loaderOptions?.height ??\n        (aspectRatio && typeof loaderOptions.width === 'number'\n          ? Math.round(aspectRatio * loaderOptions.width)\n          : null),\n    };\n  }\n\n  //  * 2. `elementProps`'s width/height\n  if (elementProps?.width || elementProps?.height) {\n    return {\n      width:\n        elementProps?.width ??\n        (aspectRatio && typeof elementProps.height === 'number'\n          ? Math.round(aspectRatio * elementProps.height)\n          : null),\n      height:\n        elementProps?.height ??\n        (aspectRatio && typeof elementProps.width === 'number'\n          ? Math.round(aspectRatio * elementProps.width)\n          : null),\n    };\n  }\n\n  //  * 3. `data`'s width/height\n  if (sfapiImage?.width || sfapiImage?.height) {\n    return {\n      // can't calculate the aspect ratio here\n      width: sfapiImage?.width ?? null,\n      height: sfapiImage?.height ?? null,\n    };\n  }\n\n  return {width: null, height: null};\n}\n", "import * as React from 'react';\nimport {\n  getShopifyImageDimensions,\n  shopifyImageLoader,\n  addImageSizeParametersToUrl,\n  IMG_SRC_SET_SIZES,\n} from './image-size.js';\nimport type {Image as ImageType} from './storefront-api-types.js';\nimport type {PartialDeep, Simplify} from 'type-fest';\n\ntype HtmlImageProps = React.ImgHTMLAttributes<HTMLImageElement>;\n\nexport type ShopifyLoaderOptions = {\n  crop?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  scale?: 2 | 3;\n  width?: HtmlImageProps['width'] | ImageType['width'];\n  height?: HtmlImageProps['height'] | ImageType['height'];\n};\nexport type ShopifyLoaderParams = Simplify<ShopifyLoaderOptions & ImageSrc>;\n\ntype ImageSrc = {\n  src: ImageType['url'];\n};\n\nexport type ShopifyImageProps = Omit<HtmlImageProps, 'src'> &\n  ShopifyImageBaseProps;\n\ntype ShopifyImageBaseProps = {\n  /** An object with fields that correspond to the Storefront API's\n   * [Image object](https://shopify.dev/api/storefront/reference/common-objects/image).\n   * The `data` prop is required.\n   */\n  data: PartialDeep<ImageType, {recurseIntoArrays: true}>;\n  /** A custom function that generates the image URL. Parameters passed in\n   * are `ShopifyLoaderParams`\n   */\n  loader?: (params: ShopifyLoaderParams) => string;\n  /** An object of `loader` function options. For example, if the `loader` function\n   * requires a `scale` option, then the value can be a property of the\n   * `loaderOptions` object (for example, `{scale: 2}`). The object shape is `ShopifyLoaderOptions`.\n   */\n  loaderOptions?: ShopifyLoaderOptions;\n  /**\n   * `src` isn't used, and should instead be passed as part of the `data` object\n   */\n  src?: never;\n  /**\n   * An array of pixel widths to overwrite the default generated srcset. For example, `[300, 600, 800]`.\n   */\n  widths?: (HtmlImageProps['width'] | ImageType['width'])[];\n};\n\n/**\n * The `Image` component renders an image for the Storefront API's\n * [Image object](https://shopify.dev/api/storefront/reference/common-objects/image) by using the `data` prop. You can [customize this component](https://shopify.dev/api/hydrogen/components#customizing-hydrogen-components) using passthrough props.\n *\n * An image's width and height are determined using the following priority list:\n * 1. The width and height values for the `loaderOptions` prop\n * 2. The width and height values for bare props\n * 3. The width and height values for the `data` prop\n *\n * If only one of `width` or `height` are defined, then the other will attempt to be calculated based on the image's aspect ratio,\n * provided that both `data.width` and `data.height` are available. If `data.width` and `data.height` aren't available, then the aspect ratio cannot be determined and the missing\n * value will remain as `null`\n */\nexport function Image({\n  data,\n  width,\n  height,\n  loading,\n  loader = shopifyImageLoader,\n  loaderOptions,\n  widths,\n  decoding = 'async',\n  ...rest\n}: ShopifyImageProps) {\n  if (!data.url) {\n    const missingUrlError = `<Image/>: the 'data' prop requires the 'url' property. Image: ${\n      data.id ?? 'no ID provided'\n    }`;\n\n    if (__HYDROGEN_DEV__) {\n      throw new Error(missingUrlError);\n    } else {\n      console.error(missingUrlError);\n    }\n\n    return null;\n  }\n\n  if (__HYDROGEN_DEV__ && !data.altText && !rest.alt) {\n    console.warn(\n      `<Image/>: the 'data' prop should have the 'altText' property, or the 'alt' prop, and one of them should not be empty. Image: ${\n        data.id ?? data.url\n      }`\n    );\n  }\n\n  const {width: imgElementWidth, height: imgElementHeight} =\n    getShopifyImageDimensions({\n      data,\n      loaderOptions,\n      elementProps: {\n        width,\n        height,\n      },\n    });\n\n  if (__HYDROGEN_DEV__ && (!imgElementWidth || !imgElementHeight)) {\n    console.warn(\n      `<Image/>: the 'data' prop requires either 'width' or 'data.width', and 'height' or 'data.height' properties. Image: ${\n        data.id ?? data.url\n      }`\n    );\n  }\n\n  let finalSrc = data.url;\n\n  if (loader) {\n    finalSrc = loader({\n      ...loaderOptions,\n      src: data.url,\n      width: imgElementWidth,\n      height: imgElementHeight,\n    });\n    if (typeof finalSrc !== 'string' || !finalSrc) {\n      throw new Error(\n        `<Image/>: 'loader' did not return a valid string. Image: ${\n          data.id ?? data.url\n        }`\n      );\n    }\n  }\n\n  // determining what the intended width of the image is. For example, if the width is specified and lower than the image width, then that is the maximum image width\n  // to prevent generating a srcset with widths bigger than needed or to generate images that would distort because of being larger than original\n  const maxWidth =\n    width && imgElementWidth && width < imgElementWidth\n      ? width\n      : imgElementWidth;\n  const finalSrcset =\n    rest.srcSet ??\n    internalImageSrcSet({\n      ...loaderOptions,\n      widths,\n      src: data.url,\n      width: maxWidth,\n      height: imgElementHeight,\n      loader,\n    });\n\n  /* eslint-disable hydrogen/prefer-image-component */\n  return (\n    <img\n      id={data.id ?? ''}\n      alt={data.altText ?? rest.alt ?? ''}\n      loading={loading ?? 'lazy'}\n      {...rest}\n      src={finalSrc}\n      width={imgElementWidth ?? undefined}\n      height={imgElementHeight ?? undefined}\n      srcSet={finalSrcset}\n      decoding={decoding}\n    />\n  );\n  /* eslint-enable hydrogen/prefer-image-component */\n}\n\ntype InternalShopifySrcSetGeneratorsParams = Simplify<\n  ShopifyLoaderOptions & {\n    src: ImageType['url'];\n    widths?: (HtmlImageProps['width'] | ImageType['width'])[];\n    loader?: (params: ShopifyLoaderParams) => string;\n  }\n>;\nfunction internalImageSrcSet({\n  src,\n  width,\n  crop,\n  scale,\n  widths,\n  loader,\n  height,\n}: InternalShopifySrcSetGeneratorsParams) {\n  const hasCustomWidths = widths && Array.isArray(widths);\n  if (hasCustomWidths && widths.some((size) => isNaN(size as number))) {\n    throw new Error(\n      `<Image/>: the 'widths' must be an array of numbers. Image: ${src}`\n    );\n  }\n\n  let aspectRatio = 1;\n  if (width && height) {\n    aspectRatio = Number(height) / Number(width);\n  }\n\n  let setSizes = hasCustomWidths ? widths : IMG_SRC_SET_SIZES;\n  if (\n    !hasCustomWidths &&\n    width &&\n    width < IMG_SRC_SET_SIZES[IMG_SRC_SET_SIZES.length - 1]\n  ) {\n    setSizes = IMG_SRC_SET_SIZES.filter((size) => size <= width);\n  }\n  const srcGenerator = loader ? loader : addImageSizeParametersToUrl;\n  return setSizes\n    .map(\n      (size) =>\n        `${srcGenerator({\n          src,\n          width: size,\n          // height is not applied if there is no crop\n          // if there is crop, then height is applied as a ratio of the original width + height aspect ratio * size\n          height: crop ? Number(size) * aspectRatio : undefined,\n          crop,\n          scale,\n        })} ${size}w`\n    )\n    .join(', ');\n}\n", "import {type HTMLAttributes} from 'react';\nimport {shopifyImageLoader} from './image-size.js';\nimport type {Video as VideoType} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\n\nexport interface VideoProps {\n  /** An object with fields that correspond to the Storefront API's [Video object](https://shopify.dev/api/storefront/latest/objects/video). */\n  data: PartialDeep<VideoType, {recurseIntoArrays: true}>;\n  /** An object of image size options for the video's `previewImage`. Uses `shopifyImageLoader` to generate the `poster` URL. */\n  previewImageOptions?: Parameters<typeof shopifyImageLoader>[0];\n  /** Props that will be passed to the `video` element's `source` children elements. */\n  sourceProps?: HTMLAttributes<HTMLSourceElement> & {\n    'data-testid'?: string;\n  };\n}\n\n/**\n * The `Video` component renders a `video` for the Storefront API's [Video object](https://shopify.dev/api/storefront/reference/products/video).\n */\nexport function Video(props: JSX.IntrinsicElements['video'] & VideoProps) {\n  const {\n    data,\n    previewImageOptions,\n    id = data.id,\n    playsInline = true,\n    controls = true,\n    sourceProps = {},\n    ...passthroughProps\n  } = props;\n\n  const posterUrl = shopifyImageLoader({\n    src: data.previewImage?.url ?? '',\n    ...previewImageOptions,\n  });\n\n  if (!data.sources) {\n    throw new Error(`<Video/> requires a 'data.sources' array`);\n  }\n\n  return (\n    // eslint-disable-next-line jsx-a11y/media-has-caption\n    <video\n      {...passthroughProps}\n      id={id}\n      playsInline={playsInline}\n      controls={controls}\n      poster={posterUrl}\n    >\n      {data.sources.map((source) => {\n        if (!(source?.url && source?.mimeType)) {\n          throw new Error(`<Video/> needs 'source.url' and 'source.mimeType'`);\n        }\n        return (\n          <source\n            {...sourceProps}\n            key={source.url}\n            src={source.url}\n            type={source.mimeType}\n          />\n        );\n      })}\n    </video>\n  );\n}\n", "import type {ExternalVideo as ExternalVideoType} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\n\ninterface BaseProps {\n  /**\n   * An object with fields that correspond to the Storefront API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).\n   */\n  data: PartialDeep<ExternalVideoType, {recurseIntoArrays: true}>;\n  /** An object containing the options available for either\n   * [YouTube](https://developers.google.com/youtube/player_parameters#Parameters) or\n   * [Vimeo](https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters).\n   */\n  options?: YouTube | Vimeo;\n}\n\nexport type ExternalVideoProps = Omit<JSX.IntrinsicElements['iframe'], 'src'> &\n  BaseProps;\n\n/**\n * The `ExternalVideo` component renders an embedded video for the Storefront\n * API's [ExternalVideo object](https://shopify.dev/api/storefront/reference/products/externalvideo).\n */\nexport function ExternalVideo(props: ExternalVideoProps) {\n  const {\n    data,\n    options,\n    id = data.id,\n    frameBorder = '0',\n    allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture',\n    allowFullScreen = true,\n    loading = 'lazy',\n    ...passthroughProps\n  } = props;\n\n  if (!data.embedUrl) {\n    throw new Error(`<ExternalVideo/> requires the 'embedUrl' property`);\n  }\n\n  let finalUrl: string = data.embedUrl;\n\n  if (options) {\n    const urlObject = new URL(data.embedUrl);\n    for (const key of Object.keys(options)) {\n      // @ts-expect-error https://github.com/microsoft/TypeScript/issues/32951\n      urlObject.searchParams.set(key, options[key]);\n    }\n    finalUrl = urlObject.toString();\n  }\n\n  return (\n    <iframe\n      {...passthroughProps}\n      id={id ?? data.embedUrl}\n      title={data.alt ?? data.id ?? 'external video'}\n      frameBorder={frameBorder}\n      allow={allow}\n      allowFullScreen={allowFullScreen}\n      src={finalUrl}\n      loading={loading}\n    ></iframe>\n  );\n}\n\ninterface YouTube {\n  autoplay?: 0 | 1;\n  cc_lang_pref?: string;\n  cc_load_policy?: 1;\n  color?: 'red' | 'white';\n  controls?: 0 | 1;\n  disablekb?: 0 | 1;\n  enablejsapi?: 0 | 1;\n  end?: number;\n  fs?: 0 | 1;\n  hl?: string;\n  iv_load_policy?: 1 | 3;\n  list?: string;\n  list_type?: 'playlist' | 'user_uploads';\n  loop?: 0 | 1;\n  modest_branding?: 1;\n  origin?: string;\n  playlist?: string;\n  plays_inline?: 0 | 1;\n  rel?: 0 | 1;\n  start?: number;\n  widget_referrer?: string;\n}\n\ntype VimeoBoolean = 0 | 1 | boolean;\n\ninterface Vimeo {\n  autopause?: VimeoBoolean;\n  autoplay?: VimeoBoolean;\n  background?: VimeoBoolean;\n  byline?: VimeoBoolean;\n  color?: string;\n  controls?: VimeoBoolean;\n  dnt?: VimeoBoolean;\n  loop?: VimeoBoolean;\n  muted?: VimeoBoolean;\n  pip?: VimeoBoolean;\n  playsinline?: VimeoBoolean;\n  portrait?: VimeoBoolean;\n  quality?: '240p' | '360p' | '540p' | '720p' | '1080p' | '2k' | '4k';\n  speed?: VimeoBoolean;\n  '#t'?: string;\n  texttrack?: string;\n  title?: VimeoBoolean;\n  transparent?: VimeoBoolean;\n}\n", "import {useState, useEffect} from 'react';\n\nconst SCRIPTS_LOADED: Record<string, Promise<boolean>> = {};\n\nexport function loadScript(\n  src: string,\n  options?: {module?: boolean; in?: 'head' | 'body'}\n): Promise<boolean> {\n  const isScriptLoaded: Promise<boolean> = SCRIPTS_LOADED[src];\n\n  if (isScriptLoaded) {\n    return isScriptLoaded;\n  }\n\n  const promise = new Promise<boolean>((resolve, reject) => {\n    const script = document.createElement('script');\n    if (options?.module) {\n      script.type = 'module';\n    } else {\n      script.type = 'text/javascript';\n    }\n    script.src = src;\n    script.onload = () => {\n      resolve(true);\n    };\n    script.onerror = () => {\n      reject(false);\n    };\n    if (options?.in === 'head') {\n      document.head.appendChild(script);\n    } else {\n      document.body.appendChild(script);\n    }\n  });\n\n  SCRIPTS_LOADED[src] = promise;\n\n  return promise;\n}\n\ntype LoadScriptParams = Parameters<typeof loadScript>;\n\n/**\n * The `useLoadScript` hook loads an external script tag in the browser. It allows React components to lazy-load large third-party dependencies.\n */\nexport function useLoadScript(\n  url: LoadScriptParams[0],\n  options?: LoadScriptParams[1]\n): ScriptState {\n  const [status, setStatus] = useState<ScriptState>('loading');\n  const stringifiedOptions = JSON.stringify(options);\n\n  useEffect(() => {\n    async function loadScriptWrapper() {\n      try {\n        setStatus('loading');\n        await loadScript(url, options);\n        setStatus('done');\n      } catch (error) {\n        setStatus('error');\n      }\n    }\n\n    loadScriptWrapper();\n  }, [url, stringifiedOptions, options]);\n\n  return status;\n}\n\ntype ScriptState = 'loading' | 'done' | 'error';\n", "import {useState, useEffect, useCallback} from 'react';\nimport {useLoadScript} from './load-script.js';\nimport type {Model3d} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\nimport type {ModelViewerElement} from '@google/model-viewer/lib/model-viewer.js';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      'model-viewer': PartialDeep<\n        ModelViewerElement,\n        {recurseIntoArrays: true}\n      >;\n    }\n  }\n}\n\ntype ModelViewerProps = Omit<\n  PartialDeep<JSX.IntrinsicElements['model-viewer'], {recurseIntoArrays: true}>,\n  'src'\n> &\n  ModelViewerBaseProps;\n\ntype ModelViewerBaseProps = {\n  /** An object with fields that correspond to the Storefront API's [Model3D object](https://shopify.dev/api/storefront/latest/objects/model3d). */\n  data: PartialDeep<Model3d, {recurseIntoArrays: true}>;\n  /** The callback to invoke when the 'error' event is triggered. Refer to [error in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-error). */\n  onError?: (event: Event) => void;\n  /** The callback to invoke when the `load` event is triggered. Refer to [load in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-load). */\n  onLoad?: (event: Event) => void;\n  /** The callback to invoke when the 'preload' event is triggered. Refer to [preload in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-preload). */\n  onPreload?: (event: Event) => void;\n  /** The callback to invoke when the 'model-visibility' event is triggered. Refer to [model-visibility in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-modelVisibility). */\n  onModelVisibility?: (event: Event) => void;\n  /** The callback to invoke when the 'progress' event is triggered. Refer to [progress in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-loading-events-progress). */\n  onProgress?: (event: Event) => void;\n  /** The callback to invoke when the 'ar-status' event is triggered. Refer to [ar-status in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arStatus). */\n  onArStatus?: (event: Event) => void;\n  /** The callback to invoke when the 'ar-tracking' event is triggered. Refer to [ar-tracking in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-arTracking). */\n  onArTracking?: (event: Event) => void;\n  /** The callback to invoke when the 'quick-look-button-tapped' event is triggered. Refer to [quick-look-button-tapped in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-events-quickLookButtonTapped). */\n  onQuickLookButtonTapped?: (event: Event) => void;\n  /** The callback to invoke when the 'camera-change' event is triggered. Refer to [camera-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-stagingandcameras-events-cameraChange). */\n  onCameraChange?: (event: Event) => void;\n  /** The callback to invoke when the 'environment-change' event is triggered. Refer to [environment-change in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-lightingandenv-events-environmentChange).  */\n  onEnvironmentChange?: (event: Event) => void;\n  /**  The callback to invoke when the 'play' event is triggered. Refer to [play in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-play). */\n  onPlay?: (event: Event) => void;\n  /**  The callback to invoke when the 'pause' event is triggered. Refer to [pause in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-animation-events-pause). */\n  onPause?: (event: Event) => void;\n  /** The callback to invoke when the 'scene-graph-ready' event is triggered. Refer to [scene-graph-ready in the <model-viewer> documentation](https://modelviewer.dev/docs/index.html#entrydocs-scenegraph-events-sceneGraphReady). */\n  onSceneGraphReady?: (event: Event) => void;\n};\n\n/**\n * The `ModelViewer` component renders a 3D model (with the `model-viewer` custom element) for\n * the Storefront API's [Model3d object](https://shopify.dev/api/storefront/reference/products/model3d).\n *\n * The `model-viewer` custom element is lazily downloaded through a dynamically-injected `<script type=\"module\">` tag when the `<ModelViewer />` component is rendered\n *\n * ModelViewer is using version `1.21.1` of the `@google/model-viewer` library.\n */\nexport function ModelViewer(props: ModelViewerProps) {\n  const [modelViewer, setModelViewer] = useState<undefined | HTMLElement>(\n    undefined\n  );\n  const callbackRef = useCallback((node: HTMLElement) => {\n    setModelViewer(node);\n  }, []);\n  const {data, children, className, ...passthroughProps} = props;\n\n  const modelViewerLoadedStatus = useLoadScript(\n    'https://unpkg.com/@google/model-viewer@v1.12.1/dist/model-viewer.min.js',\n    {\n      module: true,\n    }\n  );\n\n  useEffect(() => {\n    if (!modelViewer) {\n      return;\n    }\n    if (passthroughProps.onError)\n      modelViewer.addEventListener('error', passthroughProps.onError);\n    if (passthroughProps.onLoad)\n      modelViewer.addEventListener('load', passthroughProps.onLoad);\n    if (passthroughProps.onPreload)\n      modelViewer.addEventListener('preload', passthroughProps.onPreload);\n    if (passthroughProps.onModelVisibility)\n      modelViewer.addEventListener(\n        'model-visibility',\n        passthroughProps.onModelVisibility\n      );\n    if (passthroughProps.onProgress)\n      modelViewer.addEventListener('progress', passthroughProps.onProgress);\n    if (passthroughProps.onArStatus)\n      modelViewer.addEventListener('ar-status', passthroughProps.onArStatus);\n    if (passthroughProps.onArTracking)\n      modelViewer.addEventListener(\n        'ar-tracking',\n        passthroughProps.onArTracking\n      );\n    if (passthroughProps.onQuickLookButtonTapped)\n      modelViewer.addEventListener(\n        'quick-look-button-tapped',\n        passthroughProps.onQuickLookButtonTapped\n      );\n    if (passthroughProps.onCameraChange)\n      modelViewer.addEventListener(\n        'camera-change',\n        passthroughProps.onCameraChange\n      );\n    if (passthroughProps.onEnvironmentChange)\n      modelViewer.addEventListener(\n        'environment-change',\n        passthroughProps.onEnvironmentChange\n      );\n    if (passthroughProps.onPlay)\n      modelViewer.addEventListener('play', passthroughProps.onPlay);\n    if (passthroughProps.onPause)\n      modelViewer.addEventListener('ar-status', passthroughProps.onPause);\n    if (passthroughProps.onSceneGraphReady)\n      modelViewer.addEventListener(\n        'scene-graph-ready',\n        passthroughProps.onSceneGraphReady\n      );\n\n    return () => {\n      if (modelViewer == null) {\n        return;\n      }\n      if (passthroughProps.onError)\n        modelViewer.removeEventListener('error', passthroughProps.onError);\n      if (passthroughProps.onLoad)\n        modelViewer.removeEventListener('load', passthroughProps.onLoad);\n      if (passthroughProps.onPreload)\n        modelViewer.removeEventListener('preload', passthroughProps.onPreload);\n      if (passthroughProps.onModelVisibility)\n        modelViewer.removeEventListener(\n          'model-visibility',\n          passthroughProps.onModelVisibility\n        );\n      if (passthroughProps.onProgress)\n        modelViewer.removeEventListener(\n          'progress',\n          passthroughProps.onProgress\n        );\n      if (passthroughProps.onArStatus)\n        modelViewer.removeEventListener(\n          'ar-status',\n          passthroughProps.onArStatus\n        );\n      if (passthroughProps.onArTracking)\n        modelViewer.removeEventListener(\n          'ar-tracking',\n          passthroughProps.onArTracking\n        );\n      if (passthroughProps.onQuickLookButtonTapped)\n        modelViewer.removeEventListener(\n          'quick-look-button-tapped',\n          passthroughProps.onQuickLookButtonTapped\n        );\n      if (passthroughProps.onCameraChange)\n        modelViewer.removeEventListener(\n          'camera-change',\n          passthroughProps.onCameraChange\n        );\n      if (passthroughProps.onEnvironmentChange)\n        modelViewer.removeEventListener(\n          'environment-change',\n          passthroughProps.onEnvironmentChange\n        );\n      if (passthroughProps.onPlay)\n        modelViewer.removeEventListener('play', passthroughProps.onPlay);\n      if (passthroughProps.onPause)\n        modelViewer.removeEventListener('ar-status', passthroughProps.onPause);\n      if (passthroughProps.onSceneGraphReady)\n        modelViewer.removeEventListener(\n          'scene-graph-ready',\n          passthroughProps.onSceneGraphReady\n        );\n    };\n  }, [\n    modelViewer,\n    passthroughProps.onArStatus,\n    passthroughProps.onArTracking,\n    passthroughProps.onCameraChange,\n    passthroughProps.onEnvironmentChange,\n    passthroughProps.onError,\n    passthroughProps.onLoad,\n    passthroughProps.onModelVisibility,\n    passthroughProps.onPause,\n    passthroughProps.onPlay,\n    passthroughProps.onPreload,\n    passthroughProps.onProgress,\n    passthroughProps.onQuickLookButtonTapped,\n    passthroughProps.onSceneGraphReady,\n  ]);\n\n  if (modelViewerLoadedStatus !== 'done') {\n    // TODO: What do we want to display while the model-viewer library loads?\n    return null;\n  }\n\n  if (!data.sources?.[0]?.url) {\n    const sourcesUrlError = `<ModelViewer/> requires 'data.sources' prop to be an array, with an object that has a property 'url' on it. Rendering 'null'`;\n    if (__HYDROGEN_DEV__) {\n      throw new Error(sourcesUrlError);\n    } else {\n      console.error(sourcesUrlError);\n      return null;\n    }\n  }\n\n  if (__HYDROGEN_DEV__ && !data.alt) {\n    console.warn(\n      `<ModelViewer/> requires the 'data.alt' prop for accessibility`\n    );\n  }\n\n  return (\n    <model-viewer\n      // @ts-expect-error ref should exist\n      ref={callbackRef}\n      {...passthroughProps}\n      className={className}\n      id={passthroughProps.id ?? data.id}\n      src={data.sources[0].url}\n      alt={data.alt ?? null}\n      camera-controls={passthroughProps.cameraControls ?? true}\n      poster={(passthroughProps.poster || data.previewImage?.url) ?? null}\n      autoplay={passthroughProps.autoplay ?? true}\n      loading={passthroughProps.loading}\n      reveal={passthroughProps.reveal}\n      ar={passthroughProps.ar}\n      ar-modes={passthroughProps.arModes}\n      ar-scale={passthroughProps.arScale}\n      // @ts-expect-error arPlacement should exist as a type, not sure why it doesn't. https://modelviewer.dev/docs/index.html#entrydocs-augmentedreality-attributes-arPlacement\n      ar-placement={passthroughProps.arPlacement}\n      ios-src={passthroughProps.iosSrc}\n      touch-action={passthroughProps.touchAction}\n      disable-zoom={passthroughProps.disableZoom}\n      orbit-sensitivity={passthroughProps.orbitSensitivity}\n      auto-rotate={passthroughProps.autoRotate}\n      auto-rotate-delay={passthroughProps.autoRotateDelay}\n      // @ts-expect-error rotationPerSecond should exist as a type, not sure why it doesn't. https://modelviewer.dev/docs/index.html#entrydocs-stagingandcameras-attributes-rotationPerSecond\n      rotation-per-second={passthroughProps.rotationPerSecond}\n      interaction-policy={passthroughProps.interactionPolicy}\n      interaction-prompt={passthroughProps.interactionPrompt}\n      interaction-prompt-style={passthroughProps.interactionPromptStyle}\n      interaction-prompt-threshold={passthroughProps.interactionPromptThreshold}\n      camera-orbit={passthroughProps.cameraOrbit}\n      camera-target={passthroughProps.cameraTarget}\n      field-of-view={passthroughProps.fieldOfView}\n      max-camera-orbit={passthroughProps.maxCameraOrbit}\n      min-camera-orbit={passthroughProps.minCameraOrbit}\n      max-field-of-view={passthroughProps.maxFieldOfView}\n      min-field-of-view={passthroughProps.minFieldOfView}\n      bounds={passthroughProps.bounds}\n      interpolation-decay={passthroughProps.interpolationDecay ?? 100}\n      skybox-image={passthroughProps.skyboxImage}\n      environment-image={passthroughProps.environmentImage}\n      exposure={passthroughProps.exposure}\n      shadow-intensity={passthroughProps.shadowIntensity ?? 0}\n      shadow-softness={passthroughProps.shadowSoftness ?? 0}\n      animation-name={passthroughProps.animationName}\n      animation-crossfade-duration={passthroughProps.animationCrossfadeDuration}\n      variant-name={passthroughProps.variantName}\n      orientation={passthroughProps.orientation}\n      scale={passthroughProps.scale}\n    >\n      {children}\n    </model-viewer>\n  );\n}\n", "import {Image, type ShopifyImageProps} from './Image.js';\nimport {Video} from './Video.js';\nimport {ExternalVideo} from './ExternalVideo.js';\nimport {ModelViewer} from './ModelViewer.js';\nimport type {MediaEdge as MediaEdgeType} from './storefront-api-types.js';\nimport type {PartialDeep} from 'type-fest';\nimport type {ModelViewerElement} from '@google/model-viewer/lib/model-viewer.js';\n\ntype BaseProps = React.HTMLAttributes<\n  HTMLImageElement | HTMLVideoElement | HTMLIFrameElement | ModelViewerElement\n>;\nexport interface MediaFileProps extends BaseProps {\n  /** An object with fields that correspond to the Storefront API's [Media object](https://shopify.dev/api/storefront/reference/products/media). */\n  data: PartialDeep<MediaEdgeType['node'], {recurseIntoArrays: true}>;\n  /** The options for the `Image`, `Video`, `ExternalVideo`, or `ModelViewer` components. */\n  mediaOptions?: MediaOptions;\n}\n\ntype MediaOptions = {\n  /** Props that will only apply when an `<Image />` is rendered */\n  image?: Omit<ShopifyImageProps, 'data'>;\n  /** Props that will only apply when a `<Video />` is rendered */\n  video?: Omit<React.ComponentProps<typeof Video>, 'data'>;\n  /** Props that will only apply when an `<ExternalVideo />` is rendered */\n  externalVideo?: Omit<\n    React.ComponentProps<typeof ExternalVideo>['options'],\n    'data'\n  >;\n  /** Props that will only apply when a `<ModelViewer />` is rendered */\n  modelViewer?: Omit<typeof ModelViewer, 'data'>;\n};\n\n/**\n * The `MediaFile` component renders the media for the Storefront API's\n * [Media object](https://shopify.dev/api/storefront/reference/products/media). It renders an `Image`, a\n * `Video`, an `ExternalVideo`, or a `ModelViewer` depending on the `__typename` of the `data` prop.\n */\nexport function MediaFile({\n  data,\n  mediaOptions,\n  ...passthroughProps\n}: MediaFileProps) {\n  switch (data.__typename) {\n    case 'MediaImage': {\n      if (!data.image) {\n        const noDataImage = `<MediaFile/>: 'data.image' does not exist for __typename of 'MediaImage'; rendering 'null' by default.`;\n        if (__HYDROGEN_DEV__) {\n          throw new Error(noDataImage);\n        } else {\n          console.warn(noDataImage);\n          return null;\n        }\n      }\n\n      return (\n        <Image\n          {...passthroughProps}\n          {...mediaOptions?.image}\n          data={data.image}\n        />\n      );\n    }\n    case 'Video': {\n      return (\n        <Video {...passthroughProps} {...mediaOptions?.video} data={data} />\n      );\n    }\n    case 'ExternalVideo': {\n      return (\n        <ExternalVideo\n          {...passthroughProps}\n          {...mediaOptions?.externalVideo}\n          data={data}\n        />\n      );\n    }\n    case 'Model3d': {\n      return (\n        // @ts-expect-error There are issues with the inferred HTML attribute types here for ModelViewer (and contentEditable), but I think that's a little bit beyond me at the moment\n        <ModelViewer\n          {...passthroughProps}\n          {...mediaOptions?.modelViewer}\n          data={data}\n        />\n      );\n    }\n    default: {\n      const typenameMissingMessage = `<MediaFile /> requires the '__typename' property to exist on the 'data' prop in order to render the matching sub-component for this type of media.`;\n      if (__HYDROGEN_DEV__) {\n        throw new Error(typenameMissingMessage);\n      } else {\n        console.error(`${typenameMissingMessage}  Rendering 'null' by default`);\n        return null;\n      }\n    }\n  }\n}\n", "import type {\n  ShopifyMonorailPayload,\n  ShopifyMonorailEvent,\n  ShopifyGId,\n} from './analytics-types.js';\n\n/**\n * Builds a Shopify Monorail event from a Shopify Monorail payload and a schema ID.\n * @param payload - The Monorail payload\n * @param schemaId - The schema ID to use\n * @returns The formatted payload\n **/\nexport function schemaWrapper(\n  schemaId: string,\n  payload: ShopifyMonorailPayload\n): ShopifyMonorailEvent {\n  return {\n    schema_id: schemaId,\n    payload,\n    metadata: {\n      event_created_at_ms: Date.now(),\n    },\n  };\n}\n\n/**\n * Parses global id (gid) and returns the resource type and id.\n * @see https://shopify.dev/api/usage/gids\n * @param gid - A shopify GID (string)\n *\n * @example\n * ```ts\n * const {id, resource} = parseGid('gid://shopify/Order/123')\n * // => id = \"123\", resource = 'Order'\n *\n *  * const {id, resource} = parseGid('gid://shopify/Cart/abc123')\n * // => id = \"abc123\", resource = 'Cart'\n * ```\n **/\nexport function parseGid(gid: string | undefined): ShopifyGId {\n  const defaultReturn = {id: '', resource: null};\n\n  if (typeof gid !== 'string') {\n    return defaultReturn;\n  }\n\n  // TODO: add support for parsing query parameters on complex gids\n  // Reference: https://shopify.dev/api/usage/gids\n  const matches = gid.match(/^gid:\\/\\/shopify\\/(\\w+)\\/([a-z0-9]+)/);\n\n  if (!matches || matches.length === 1) {\n    return defaultReturn;\n  }\n  const id = matches[2] ?? null;\n  const resource = matches[1] ?? null;\n\n  return {id, resource};\n}\n\n/**\n * Filters properties from an object and returns a new object with only the properties that have a truthy value.\n * @param keyValuePairs - An object of key-value pairs\n * @param formattedData - An object which will hold the truthy values\n * @returns The formatted object\n **/\nexport function addDataIf(\n  keyValuePairs: ShopifyMonorailPayload,\n  formattedData: ShopifyMonorailPayload\n): ShopifyMonorailPayload {\n  if (typeof keyValuePairs !== 'object') {\n    return {};\n  }\n  Object.entries(keyValuePairs).forEach(([key, value]) => {\n    if (value) {\n      formattedData[key] = value;\n    }\n  });\n  return formattedData;\n}\n\n/**\n * Utility that errors if a function is called on the server.\n * @param fnName - The name of the function\n * @returns A boolean\n **/\nexport function errorIfServer(fnName: string): boolean {\n  if (typeof document === 'undefined') {\n    console.error(\n      `${fnName} should only be used within the useEffect callback or event handlers`\n    );\n    return true;\n  }\n  return false;\n}\n", "import {useShop} from './ShopifyProvider.js';\nimport {useLoadScript} from './load-script.js';\nimport {parseGid} from './analytics-utils.js';\n\n// By using 'never' in the \"or\" cases below, it makes these props \"exclusive\" and means that you cannot pass both of them; you must pass either one OR the other.\ntype ShopPayButtonProps = ShopPayButtonStyleProps &\n  (ShopPayVariantIds | ShopPayVariantAndQuantities);\n\ntype ShopPayButtonStyleProps = {\n  /** A string of classes to apply to the `div` that wraps the Shop Pay button. */\n  className?: string;\n  /** A string that's applied to the [CSS custom property (variable)](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) `--shop-pay-button-width` for the [Buy with Shop Pay component](https://shopify.dev/custom-storefronts/tools/web-components#buy-with-shop-pay-component). */\n  width?: string;\n};\n\ntype ShopPayVariantIds = {\n  /** An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`. */\n  variantIds: string[];\n  /** An array of variant IDs and quantities to purchase with Shop Pay. */\n  variantIdsAndQuantities?: never;\n};\n\ntype ShopPayVariantAndQuantities = {\n  /** An array of IDs of the variants to purchase with Shop Pay. This will only ever have a quantity of 1 for each variant. If you want to use other quantities, then use `variantIdsAndQuantities`. */\n  variantIds?: never;\n  /** An array of variant IDs and quantities to purchase with Shop Pay. */\n  variantIdsAndQuantities: Array<{\n    id: string;\n    quantity: number;\n  }>;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      'shop-pay-button': {\n        variants: string;\n        'store-url': string;\n      };\n    }\n  }\n}\n\nconst SHOPJS_URL =\n  'https://cdn.shopify.com/shopifycloud/shop-js/v1.0/client.js';\n\n/**\n * The `ShopPayButton` component renders a button that redirects to the Shop Pay checkout.\n * It renders a [`<shop-pay-button>`](https://shopify.dev/custom-storefronts/tools/web-components) custom element, for which it will lazy-load the source code automatically.\n * It relies on the `<ShopProvider>` context provider.\n */\nexport function ShopPayButton({\n  variantIds,\n  className,\n  variantIdsAndQuantities,\n  width,\n}: ShopPayButtonProps) {\n  const {storeDomain} = useShop();\n  const shopPayLoadedStatus = useLoadScript(SHOPJS_URL);\n\n  let ids: string[] = [];\n\n  if (variantIds && variantIdsAndQuantities) {\n    throw new Error(DoublePropsErrorMessage);\n  }\n\n  if (variantIds) {\n    ids = variantIds.reduce<string[]>((prev, curr) => {\n      const bareId = parseGid(curr).id;\n      if (bareId) {\n        prev.push(bareId);\n      }\n      return prev;\n    }, []);\n  } else if (variantIdsAndQuantities) {\n    ids = variantIdsAndQuantities.reduce<string[]>((prev, curr) => {\n      const bareId = parseGid(curr?.id).id;\n      if (bareId) {\n        prev.push(`${bareId}:${curr?.quantity ?? 1}`);\n      }\n      return prev;\n    }, []);\n  } else {\n    throw new Error(MissingPropsErrorMessage);\n  }\n\n  if (ids.length === 0) {\n    throw new Error(InvalidPropsErrorMessage);\n  }\n\n  const style = width\n    ? ({\n        '--shop-pay-button-width': width,\n      } as React.CSSProperties)\n    : undefined;\n\n  return (\n    <div className={className} style={style}>\n      {shopPayLoadedStatus === 'done' && (\n        <shop-pay-button store-url={storeDomain} variants={ids.join(',')} />\n      )}\n    </div>\n  );\n}\n\nexport const InvalidPropsErrorMessage = `You must pass in \"variantIds\" in the form of [\"gid://shopify/ProductVariant/1\"]`;\nexport const MissingPropsErrorMessage = `You must pass in either \"variantIds\" or \"variantIdsAndQuantities\" to ShopPayButton`;\nexport const DoublePropsErrorMessage = `You must provide either a variantIds or variantIdsAndQuantities prop, but not both in the ShopPayButton component`;\n", "import type {PartialDeep} from 'type-fest';\n\n/**\n * The `flattenConnection` utility transforms a connection object from the Storefront API (for example, [Product-related connections](https://shopify.dev/api/storefront/reference/products/product)) into a flat array of nodes.\n * The utility works with either `nodes` or `edges.node`.\n *\n * If `connection` is null or undefined, will return an empty array instead in production. In development, an error will be thrown.\n */\nexport function flattenConnection<\n  ConnectionGeneric extends\n    | PartialDeep<ConnectionEdges, {recurseIntoArrays: true}>\n    | PartialDeep<ConnectionNodes, {recurseIntoArrays: true}>\n    | ConnectionEdges\n    | ConnectionNodes\n>(\n  connection?: ConnectionGeneric\n): ConnectionGeneric extends\n  | {\n      edges: {node: Array<infer ConnectionBaseType>};\n    }\n  | {\n      nodes: Array<infer ConnectionBaseType>;\n    }\n  ? // if it's not a PartialDeep, then return the infered type\n    ConnectionBaseType[]\n  : ConnectionGeneric extends\n      | PartialDeep<\n          {edges: {node: Array<infer ConnectionBaseType>}},\n          {recurseIntoArrays: true}\n        >\n      | PartialDeep<\n          {\n            nodes: Array<infer ConnectionBaseType>;\n          },\n          {recurseIntoArrays: true}\n        >\n  ? // if it is a PartialDeep, return a PartialDeep inferred type\n    PartialDeep<ConnectionBaseType[], {recurseIntoArrays: true}>\n  : never {\n  if (!connection) {\n    const noConnectionErr = `flattenConnection(): needs a 'connection' to flatten, but received '${connection}' instead.`;\n    if (__HYDROGEN_DEV__) {\n      throw new Error(noConnectionErr);\n    } else {\n      console.error(noConnectionErr + ` Returning an empty array`);\n      // @ts-expect-error We don't want to crash prod, so return an empty array\n      return [];\n    }\n  }\n\n  if ('nodes' in connection) {\n    // @ts-expect-error return type is failing\n    return connection.nodes;\n  }\n\n  if ('edges' in connection && Array.isArray(connection.edges)) {\n    // @ts-expect-error return type is failing\n    return connection.edges.map((edge) => {\n      if (!edge?.node) {\n        throw new Error(\n          'flattenConnection(): Connection edges must contain nodes'\n        );\n      }\n      return edge.node;\n    });\n  }\n\n  if (__HYDROGEN_DEV__) {\n    console.warn(\n      `flattenConnection(): The connection did not contain either \"nodes\" or \"edges.node\". Returning an empty array.`\n    );\n  }\n\n  // @ts-expect-error We don't want to crash prod, so return an empty array\n  return [];\n}\n\ntype ConnectionEdges = {\n  edges: {node: Array<unknown>};\n};\n\ntype ConnectionNodes = {\n  nodes: Array<unknown>;\n};\n"],
  "mappings": "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",
  "names": ["SFAPI_VERSION", "getPublicTokenHeadersRaw", "contentType", "storefrontApiVersion", "accessToken", "ShopifyContext", "SFAPI_VERSION", "ShopifyProvider", "children", "shopifyConfig", "finalConfig", "getShopifyDomain", "overrideProps", "getPublicTokenHeadersRaw", "finalDomainUrl", "useShop", "shopContext", "useMoney", "money", "countryIsoCode", "languageIsoCode", "useShop", "locale", "amount", "options", "defaultFormatter", "useLazyFormatter", "nameFormatter", "narrowSymbolFormatter", "withoutTrailingZerosFormatter", "withoutCurrencyFormatter", "withoutTrailingZerosOrCurrencyFormatter", "isPartCurrency", "part", "lazyFormatters", "_a", "target", "key", "memoized", "Money", "data", "as", "withoutCurrency", "withoutTrailingZeros", "measurement", "measurementSeparator", "passthroughProps", "isMoney", "moneyObject", "useMoney", "Wrapper", "output", "maybeMoney", "PRODUCTION_CDN_HOSTNAMES", "LOCAL_CDN_HOSTNAMES", "ALL_CDN_HOSTNAMES", "IMG_SRC_SET_SIZES", "addImageSizeParametersToUrl", "src", "width", "height", "crop", "scale", "newUrl", "multipliedScale", "finalWidth", "shopifyImageLoader", "params", "newSrc", "allowedHostname", "getShopifyImageDimensions", "sfapiImage", "loaderOptions", "elementProps", "aspectRatio", "Image", "data", "width", "height", "loading", "loader", "shopifyImageLoader", "loaderOptions", "widths", "decoding", "rest", "missingUrlError", "imgElementWidth", "imgElementHeight", "getShopifyImageDimensions", "finalSrc", "maxWidth", "finalSrcset", "internalImageSrcSet", "src", "crop", "scale", "hasCustomWidths", "size", "aspectRatio", "setSizes", "IMG_SRC_SET_SIZES", "srcGenerator", "addImageSizeParametersToUrl", "Video", "props", "data", "previewImageOptions", "id", "playsInline", "controls", "sourceProps", "passthroughProps", "posterUrl", "shopifyImageLoader", "_a", "source", "ExternalVideo", "props", "data", "options", "id", "frameBorder", "allow", "allowFullScreen", "loading", "passthroughProps", "finalUrl", "urlObject", "key", "SCRIPTS_LOADED", "loadScript", "src", "options", "isScriptLoaded", "promise", "resolve", "reject", "script", "useLoadScript", "url", "status", "setStatus", "stringifiedOptions", "loadScriptWrapper", "ModelViewer", "props", "modelViewer", "setModelViewer", "callbackRef", "node", "data", "children", "className", "passthroughProps", "modelViewerLoadedStatus", "useLoadScript", "_b", "_a", "_c", "MediaFile", "data", "mediaOptions", "passthroughProps", "Image", "Video", "ExternalVideo", "ModelViewer", "parseGid", "gid", "defaultReturn", "matches", "id", "resource", "SHOPJS_URL", "ShopPayButton", "variantIds", "className", "variantIdsAndQuantities", "width", "storeDomain", "useShop", "shopPayLoadedStatus", "useLoadScript", "ids", "DoublePropsErrorMessage", "prev", "curr", "bareId", "parseGid", "MissingPropsErrorMessage", "InvalidPropsErrorMessage", "flattenConnection", "connection", "noConnectionErr", "edge"]
}
