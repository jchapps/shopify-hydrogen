{"version":3,"file":"5a750bd7.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/utilities/parse.js","../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/useUrl/useUrl.js"],"sourcesContent":["import { RSC_PATHNAME } from '../constants.js';\nexport function parseJSON(json) {\n    if (String(json).includes('__proto__'))\n        return JSON.parse(json, noproto);\n    return JSON.parse(json);\n}\nfunction noproto(k, v) {\n    if (k !== '__proto__')\n        return v;\n}\nexport function parseState(url) {\n    try {\n        const { pathname, search } = url;\n        const stateParam = url.searchParams.get('state');\n        const state = pathname === RSC_PATHNAME\n            ? stateParam\n                ? parseJSON(decodeURIComponent(stateParam))\n                : {}\n            : {\n                pathname: decodeURIComponent(pathname),\n                search: decodeURIComponent(search),\n            };\n        return state;\n    }\n    catch {\n        // Do not throw to prevent unhandled errors\n    }\n}\n","import { useContext, useMemo } from 'react';\nimport { RSC_PATHNAME } from '../../constants.js';\nimport { parseState } from '../../utilities/parse.js';\nimport { RouterContext } from '../Router/BrowserRouter.client.js';\nimport { useEnvContext, META_ENV_SSR } from '../ssr-interop.js';\n/**\n * The `useUrl` hook retrieves the current URL in a server or client component.\n */\nexport function useUrl() {\n    if (META_ENV_SSR) {\n        const serverUrl = new URL(useEnvContext((req) => req.url) // eslint-disable-line react-hooks/rules-of-hooks\n        );\n        if (serverUrl.pathname === RSC_PATHNAME) {\n            const state = parseState(serverUrl);\n            const parsedUrl = `${serverUrl.origin}${state?.pathname ?? ''}${state?.search ?? ''}`;\n            return new URL(parsedUrl);\n        }\n        return new URL(serverUrl);\n    }\n    /**\n     * We return a `URL` object instead of passing through `location` because\n     * the URL object contains important info like hostname, etc.\n     * Note: do not call `useLocation` directly here to avoid throwing errors\n     * when `useUrl` is used outside of a Router component (e.g. in <Seo>).\n     */\n    const location = useContext(RouterContext); // eslint-disable-line react-hooks/rules-of-hooks\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMemo(() => new URL(window.location.href), [location]); // eslint-disable-line react-hooks/exhaustive-deps\n}\n"],"names":["parseJSON","json","noproto","k","v","parseState","url","pathname","search","stateParam","RSC_PATHNAME","useUrl","META_ENV_SSR","serverUrl","useEnvContext","state","parsedUrl","_a","_b","location","useContext","RouterContext","useMemo"],"mappings":"qHACO,SAASA,EAAUC,EAAM,CAC5B,OAAI,OAAOA,CAAI,EAAE,SAAS,WAAW,EAC1B,KAAK,MAAMA,EAAMC,CAAO,EAC5B,KAAK,MAAMD,CAAI,CAC1B,CACA,SAASC,EAAQC,EAAGC,EAAG,CACnB,GAAID,IAAM,YACN,OAAOC,CACf,CACO,SAASC,EAAWC,EAAK,CAC5B,GAAI,CACA,KAAM,CAAE,SAAAC,EAAU,OAAAC,CAAQ,EAAGF,EACvBG,EAAaH,EAAI,aAAa,IAAI,OAAO,EAS/C,OARcC,IAAaG,EACrBD,EACIT,EAAU,mBAAmBS,CAAU,CAAC,EACxC,CAAE,EACN,CACE,SAAU,mBAAmBF,CAAQ,EACrC,OAAQ,mBAAmBC,CAAM,CACjD,CAEK,MACD,CAEC,CACL,CCnBO,SAASG,GAAS,SACrB,GAAIC,EAAc,CACd,MAAMC,EAAY,IAAI,IAAIC,EAA8B,CAChE,EACQ,GAAID,EAAU,WAAaH,EAAc,CACrC,MAAMK,EAAQV,EAAWQ,CAAS,EAC5BG,EAAY,GAAGH,EAAU,UAASI,EAAAF,GAAA,YAAAA,EAAO,WAAP,KAAAE,EAAmB,MAAKC,EAAAH,GAAA,YAAAA,EAAO,SAAP,KAAAG,EAAiB,KACjF,OAAO,IAAI,IAAIF,CAAS,CAC3B,CACD,OAAO,IAAI,IAAIH,CAAS,CAC3B,CAOD,MAAMM,EAAWC,qBAAWC,CAAa,EAEzC,OAAOC,EAAO,QAAA,QAAC,IAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EAAG,CAACH,CAAQ,CAAC,CAClE"}