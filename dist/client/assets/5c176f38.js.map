{"version":3,"file":"5c176f38.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/CartActions.client.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/useCartAPIStateMachine.client.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/constants.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/CartProvider.client.js"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { CountryCode, } from '../../storefront-api-types.js';\nimport { CartAttributesUpdate, CartBuyerIdentityUpdate, CartCreate, CartDiscountCodesUpdate, CartLineAdd, CartLineRemove, CartLineUpdate, CartNoteUpdate, CartQuery, } from './cart-queries.js';\nimport { useCartFetch } from './hooks.client.js';\n/**\n * The `useCartActions` hook returns helper graphql functions for Storefront Cart API\n *\n * See [cart API graphql mutations](https://shopify.dev/api/storefront/2022-07/objects/Cart)\n */\nexport function useCartActions({ numCartLines, cartFragment, countryCode = CountryCode.Us, }) {\n    const fetchCart = useCartFetch();\n    const cartFetch = useCallback((cartId) => {\n        return fetchCart({\n            query: CartQuery(cartFragment),\n            variables: {\n                id: cartId,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartCreate = useCallback((cart) => {\n        return fetchCart({\n            query: CartCreate(cartFragment),\n            variables: {\n                input: cart,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    const cartLineAdd = useCallback((cartId, lines) => {\n        return fetchCart({\n            query: CartLineAdd(cartFragment),\n            variables: {\n                cartId,\n                lines,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    const cartLineUpdate = useCallback((cartId, lines) => {\n        return fetchCart({\n            query: CartLineUpdate(cartFragment),\n            variables: {\n                cartId,\n                lines,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    const cartLineRemove = useCallback((cartId, lines) => {\n        return fetchCart({\n            query: CartLineRemove(cartFragment),\n            variables: {\n                cartId,\n                lines,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    const noteUpdate = useCallback((cartId, note) => {\n        return fetchCart({\n            query: CartNoteUpdate(cartFragment),\n            variables: {\n                cartId,\n                note,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [fetchCart, cartFragment, numCartLines, countryCode]);\n    const buyerIdentityUpdate = useCallback((cartId, buyerIdentity) => {\n        return fetchCart({\n            query: CartBuyerIdentityUpdate(cartFragment),\n            variables: {\n                cartId,\n                buyerIdentity,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    const cartAttributesUpdate = useCallback((cartId, attributes) => {\n        return fetchCart({\n            query: CartAttributesUpdate(cartFragment),\n            variables: {\n                cartId,\n                attributes,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    const discountCodesUpdate = useCallback((cartId, discountCodes) => {\n        return fetchCart({\n            query: CartDiscountCodesUpdate(cartFragment),\n            variables: {\n                cartId,\n                discountCodes,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n    }, [cartFragment, countryCode, fetchCart, numCartLines]);\n    return useMemo(() => ({\n        cartFetch,\n        cartCreate,\n        cartLineAdd,\n        cartLineUpdate,\n        cartLineRemove,\n        noteUpdate,\n        buyerIdentityUpdate,\n        cartAttributesUpdate,\n        discountCodesUpdate,\n        cartFragment,\n    }), [\n        cartFetch,\n        cartCreate,\n        cartLineAdd,\n        cartLineUpdate,\n        cartLineRemove,\n        noteUpdate,\n        buyerIdentityUpdate,\n        cartAttributesUpdate,\n        discountCodesUpdate,\n        cartFragment,\n    ]);\n}\n","import { useMachine } from '@xstate/react/fsm';\nimport { createMachine, assign } from '@xstate/fsm';\nimport { flattenConnection } from '../../utilities/flattenConnection/index.js';\nimport { useCartActions } from './CartActions.client.js';\nimport { useMemo } from 'react';\nfunction invokeCart(action, options) {\n    return {\n        entry: [\n            ...(options?.entryActions || []),\n            assign({\n                lastValidCart: (context) => context?.cart,\n            }),\n            'onCartActionEntry',\n            'onCartActionOptimisticUI',\n            action,\n        ],\n        on: {\n            RESOLVE: {\n                target: options?.resolveTarget || 'idle',\n                actions: [\n                    assign({\n                        prevCart: (context) => context?.lastValidCart,\n                        cart: (_, event) => event?.payload?.cart,\n                        rawCartResult: (_, event) => event?.payload?.rawCartResult,\n                        errors: (_) => undefined,\n                    }),\n                ],\n            },\n            ERROR: {\n                target: options?.errorTarget || 'error',\n                actions: [\n                    assign({\n                        prevCart: (context) => context?.lastValidCart,\n                        cart: (context, _) => context?.lastValidCart,\n                        errors: (_, event) => event?.payload?.errors,\n                    }),\n                ],\n            },\n            CART_COMPLETED: {\n                target: 'cartCompleted',\n                actions: assign({\n                    prevCart: (_) => undefined,\n                    cart: (_) => undefined,\n                    lastValidCart: (_) => undefined,\n                    rawCartResult: (_) => undefined,\n                    errors: (_) => undefined,\n                }),\n            },\n        },\n        exit: ['onCartActionComplete', ...(options?.exitActions || [])],\n    };\n}\nconst INITIALIZING_CART_EVENTS = {\n    CART_FETCH: {\n        target: 'cartFetching',\n    },\n    CART_CREATE: {\n        target: 'cartCreating',\n    },\n    CART_SET: {\n        target: 'idle',\n        actions: [\n            assign({\n                rawCartResult: (_, event) => event.payload.cart,\n                cart: (_, event) => cartFromGraphQL(event.payload.cart),\n            }),\n        ],\n    },\n};\nconst UPDATING_CART_EVENTS = {\n    CARTLINE_ADD: {\n        target: 'cartLineAdding',\n    },\n    CARTLINE_UPDATE: {\n        target: 'cartLineUpdating',\n    },\n    CARTLINE_REMOVE: {\n        target: 'cartLineRemoving',\n    },\n    NOTE_UPDATE: {\n        target: 'noteUpdating',\n    },\n    BUYER_IDENTITY_UPDATE: {\n        target: 'buyerIdentityUpdating',\n    },\n    CART_ATTRIBUTES_UPDATE: {\n        target: 'cartAttributesUpdating',\n    },\n    DISCOUNT_CODES_UPDATE: {\n        target: 'discountCodesUpdating',\n    },\n};\nfunction createCartMachine(initialCart) {\n    return createMachine({\n        id: 'Cart',\n        initial: initialCart ? 'idle' : 'uninitialized',\n        context: {\n            cart: initialCart && cartFromGraphQL(initialCart),\n        },\n        states: {\n            uninitialized: {\n                on: INITIALIZING_CART_EVENTS,\n            },\n            cartCompleted: {\n                on: INITIALIZING_CART_EVENTS,\n            },\n            initializationError: {\n                on: INITIALIZING_CART_EVENTS,\n            },\n            idle: {\n                on: { ...INITIALIZING_CART_EVENTS, ...UPDATING_CART_EVENTS },\n            },\n            error: {\n                on: { ...INITIALIZING_CART_EVENTS, ...UPDATING_CART_EVENTS },\n            },\n            cartFetching: invokeCart('cartFetchAction', {\n                errorTarget: 'initializationError',\n            }),\n            cartCreating: invokeCart('cartCreateAction', {\n                errorTarget: 'initializationError',\n            }),\n            cartLineRemoving: invokeCart('cartLineRemoveAction'),\n            cartLineUpdating: invokeCart('cartLineUpdateAction'),\n            cartLineAdding: invokeCart('cartLineAddAction'),\n            noteUpdating: invokeCart('noteUpdateAction'),\n            buyerIdentityUpdating: invokeCart('buyerIdentityUpdateAction'),\n            cartAttributesUpdating: invokeCart('cartAttributesUpdateAction'),\n            discountCodesUpdating: invokeCart('discountCodesUpdateAction'),\n        },\n    });\n}\nexport function useCartAPIStateMachine({ numCartLines, onCartActionEntry, onCartActionOptimisticUI, onCartActionComplete, data: cart, cartFragment, countryCode, }) {\n    const { cartFetch, cartCreate, cartLineAdd, cartLineUpdate, cartLineRemove, noteUpdate, buyerIdentityUpdate, cartAttributesUpdate, discountCodesUpdate, } = useCartActions({\n        numCartLines,\n        cartFragment,\n        countryCode,\n    });\n    const cartMachine = useMemo(() => createCartMachine(cart), [cart]);\n    const [state, send, service] = useMachine(cartMachine, {\n        actions: {\n            cartFetchAction: async (_, event) => {\n                if (event.type !== 'CART_FETCH')\n                    return;\n                const { data, errors } = await cartFetch(event?.payload?.cartId);\n                const resultEvent = eventFromFetchResult(event, data?.cart, errors);\n                send(resultEvent);\n            },\n            cartCreateAction: async (_, event) => {\n                if (event.type !== 'CART_CREATE')\n                    return;\n                const { data, errors } = await cartCreate(event?.payload);\n                const resultEvent = eventFromFetchResult(event, data?.cartCreate?.cart, errors);\n                send(resultEvent);\n            },\n            cartLineAddAction: async (context, event) => {\n                if (event.type !== 'CARTLINE_ADD' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await cartLineAdd(context.cart.id, event.payload.lines);\n                const resultEvent = eventFromFetchResult(event, data?.cartLinesAdd?.cart, errors);\n                send(resultEvent);\n            },\n            cartLineUpdateAction: async (context, event) => {\n                if (event.type !== 'CARTLINE_UPDATE' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await cartLineUpdate(context.cart.id, event.payload.lines);\n                const resultEvent = eventFromFetchResult(event, data?.cartLinesUpdate?.cart, errors);\n                send(resultEvent);\n            },\n            cartLineRemoveAction: async (context, event) => {\n                if (event.type !== 'CARTLINE_REMOVE' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await cartLineRemove(context.cart.id, event.payload.lines);\n                const resultEvent = eventFromFetchResult(event, data?.cartLinesRemove?.cart, errors);\n                send(resultEvent);\n            },\n            noteUpdateAction: async (context, event) => {\n                if (event.type !== 'NOTE_UPDATE' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await noteUpdate(context.cart.id, event.payload.note);\n                const resultEvent = eventFromFetchResult(event, data?.cartNoteUpdate?.cart, errors);\n                send(resultEvent);\n            },\n            buyerIdentityUpdateAction: async (context, event) => {\n                if (event.type !== 'BUYER_IDENTITY_UPDATE' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await buyerIdentityUpdate(context.cart.id, event.payload.buyerIdentity);\n                const resultEvent = eventFromFetchResult(event, data?.cartBuyerIdentityUpdate?.cart, errors);\n                send(resultEvent);\n            },\n            cartAttributesUpdateAction: async (context, event) => {\n                if (event.type !== 'CART_ATTRIBUTES_UPDATE' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await cartAttributesUpdate(context.cart.id, event.payload.attributes);\n                const resultEvent = eventFromFetchResult(event, data?.cartAttributesUpdate?.cart, errors);\n                send(resultEvent);\n            },\n            discountCodesUpdateAction: async (context, event) => {\n                if (event.type !== 'DISCOUNT_CODES_UPDATE' || !context?.cart?.id)\n                    return;\n                const { data, errors } = await discountCodesUpdate(context.cart.id, event.payload.discountCodes);\n                const resultEvent = eventFromFetchResult(event, data?.cartDiscountCodesUpdate?.cart, errors);\n                send(resultEvent);\n            },\n            ...(onCartActionEntry && {\n                onCartActionEntry: (context, event) => {\n                    if (isCartActionEvent(event)) {\n                        onCartActionEntry(context, event);\n                    }\n                },\n            }),\n            ...(onCartActionOptimisticUI && {\n                onCartActionOptimisticUI: assign((context, event) => {\n                    return onCartActionOptimisticUI(context, event);\n                }),\n            }),\n            ...(onCartActionComplete && {\n                onCartActionComplete: (context, event) => {\n                    if (isCartFetchResultEvent(event)) {\n                        onCartActionComplete(context, event);\n                    }\n                },\n            }),\n        },\n    });\n    return useMemo(() => [state, send, service], [state, send, service]);\n}\nexport function cartFromGraphQL(cart) {\n    return {\n        ...cart,\n        // @ts-expect-error While the cart still uses fragments, there will be a TS error here until we remove those fragments and get the type in-line\n        lines: flattenConnection(cart.lines),\n        note: cart.note ?? undefined,\n    };\n}\nfunction eventFromFetchResult(cartActionEvent, cart, errors) {\n    if (errors) {\n        return { type: 'ERROR', payload: { errors, cartActionEvent } };\n    }\n    if (!cart) {\n        return {\n            type: 'CART_COMPLETED',\n            payload: {\n                cartActionEvent,\n            },\n        };\n    }\n    return {\n        type: 'RESOLVE',\n        payload: {\n            cart: cartFromGraphQL(cart),\n            rawCartResult: cart,\n            cartActionEvent,\n        },\n    };\n}\nfunction isCartActionEvent(event) {\n    return (event.type === 'CART_CREATE' ||\n        event.type === 'CARTLINE_ADD' ||\n        event.type === 'CARTLINE_UPDATE' ||\n        event.type === 'CARTLINE_REMOVE' ||\n        event.type === 'NOTE_UPDATE' ||\n        event.type === 'BUYER_IDENTITY_UPDATE' ||\n        event.type === 'CART_ATTRIBUTES_UPDATE' ||\n        event.type === 'DISCOUNT_CODES_UPDATE');\n}\nfunction isCartFetchResultEvent(event) {\n    return (event.type === 'RESOLVE' ||\n        event.type === 'ERROR' ||\n        event.type === 'CART_COMPLETED');\n}\n","export const CART_ID_STORAGE_KEY = 'shopifyCartId';\nexport const CART_COOKIE_TTL_DAYS = 14;\n","import React, { useCallback, useEffect, useMemo, useRef, useState, useTransition, } from 'react';\nimport { CountryCode, } from '../../storefront-api-types.js';\nimport { defaultCartFragment } from './cart-queries.js';\nimport { CartContext } from './context.js';\nimport { useCartAPIStateMachine } from './useCartAPIStateMachine.client.js';\nimport { CART_ID_STORAGE_KEY } from './constants.js';\nimport { ClientAnalytics } from '../../foundation/Analytics/ClientAnalytics.js';\nexport function CartProvider({ children, numCartLines, onCreate, onLineAdd, onLineRemove, onLineUpdate, onNoteUpdate, onBuyerIdentityUpdate, onAttributesUpdate, onDiscountCodesUpdate, onCreateComplete, onLineAddComplete, onLineRemoveComplete, onLineUpdateComplete, onNoteUpdateComplete, onBuyerIdentityUpdateComplete, onAttributesUpdateComplete, onDiscountCodesUpdateComplete, data: cart, cartFragment = defaultCartFragment, customerAccessToken, countryCode = CountryCode.Us, }) {\n    if (countryCode)\n        countryCode = countryCode.toUpperCase();\n    const [prevCountryCode, setPrevCountryCode] = useState(countryCode);\n    const [prevCustomerAccessToken, setPrevCustomerAccessToken] = useState(customerAccessToken);\n    const customerOverridesCountryCode = useRef(false);\n    if (prevCountryCode !== countryCode ||\n        prevCustomerAccessToken !== customerAccessToken) {\n        setPrevCountryCode(countryCode);\n        setPrevCustomerAccessToken(customerAccessToken);\n        customerOverridesCountryCode.current = false;\n    }\n    const onCartActionEntry = useCallback((context, event) => {\n        try {\n            switch (event.type) {\n                case 'CART_CREATE':\n                    return onCreate?.();\n                case 'CARTLINE_ADD':\n                    return onLineAdd?.();\n                case 'CARTLINE_REMOVE':\n                    return onLineRemove?.();\n                case 'CARTLINE_UPDATE':\n                    return onLineUpdate?.();\n                case 'NOTE_UPDATE':\n                    return onNoteUpdate?.();\n                case 'BUYER_IDENTITY_UPDATE':\n                    return onBuyerIdentityUpdate?.();\n                case 'CART_ATTRIBUTES_UPDATE':\n                    return onAttributesUpdate?.();\n                case 'DISCOUNT_CODES_UPDATE':\n                    return onDiscountCodesUpdate?.();\n            }\n        }\n        catch (error) {\n            console.error('Cart entry action failed', error);\n        }\n    }, [\n        onAttributesUpdate,\n        onBuyerIdentityUpdate,\n        onCreate,\n        onDiscountCodesUpdate,\n        onLineAdd,\n        onLineRemove,\n        onLineUpdate,\n        onNoteUpdate,\n    ]);\n    const onCartActionOptimisticUI = useCallback((context, event) => {\n        if (!context.cart)\n            return { ...context };\n        switch (event.type) {\n            case 'CARTLINE_REMOVE':\n                return {\n                    ...context,\n                    cart: {\n                        ...context.cart,\n                        lines: context.cart.lines.filter(({ id }) => !event.payload.lines.includes(id)),\n                    },\n                };\n            case 'CARTLINE_UPDATE':\n                return {\n                    ...context,\n                    cart: {\n                        ...context.cart,\n                        lines: context?.cart?.lines.map((line) => {\n                            const updatedLine = event.payload.lines.find(({ id }) => id === line.id);\n                            if (updatedLine && updatedLine.quantity) {\n                                return {\n                                    ...line,\n                                    quantity: updatedLine.quantity,\n                                };\n                            }\n                            return line;\n                        }),\n                    },\n                };\n        }\n        return { ...context };\n    }, []);\n    const onCartActionComplete = useCallback((context, event) => {\n        const cartActionEvent = event.payload.cartActionEvent;\n        try {\n            switch (event.type) {\n                case 'RESOLVE':\n                    switch (cartActionEvent.type) {\n                        case 'CART_CREATE':\n                            publishCreateAnalytics(context, cartActionEvent);\n                            return onCreateComplete?.();\n                        case 'CARTLINE_ADD':\n                            publishLineAddAnalytics(context, cartActionEvent);\n                            return onLineAddComplete?.();\n                        case 'CARTLINE_REMOVE':\n                            publishLineRemoveAnalytics(context, cartActionEvent);\n                            return onLineRemoveComplete?.();\n                        case 'CARTLINE_UPDATE':\n                            publishLineUpdateAnalytics(context, cartActionEvent);\n                            return onLineUpdateComplete?.();\n                        case 'NOTE_UPDATE':\n                            return onNoteUpdateComplete?.();\n                        case 'BUYER_IDENTITY_UPDATE':\n                            if (countryCodeNotUpdated(context, cartActionEvent)) {\n                                customerOverridesCountryCode.current = true;\n                            }\n                            return onBuyerIdentityUpdateComplete?.();\n                        case 'CART_ATTRIBUTES_UPDATE':\n                            return onAttributesUpdateComplete?.();\n                        case 'DISCOUNT_CODES_UPDATE':\n                            publishDiscountCodesUpdateAnalytics(context, cartActionEvent);\n                            return onDiscountCodesUpdateComplete?.();\n                    }\n            }\n        }\n        catch (error) {\n            console.error('onCartActionComplete failed', error);\n        }\n    }, [\n        onAttributesUpdateComplete,\n        onBuyerIdentityUpdateComplete,\n        onCreateComplete,\n        onDiscountCodesUpdateComplete,\n        onLineAddComplete,\n        onLineRemoveComplete,\n        onLineUpdateComplete,\n        onNoteUpdateComplete,\n    ]);\n    const [cartState, cartSend] = useCartAPIStateMachine({\n        numCartLines,\n        data: cart,\n        cartFragment,\n        countryCode,\n        onCartActionEntry,\n        onCartActionOptimisticUI,\n        onCartActionComplete,\n    });\n    const cartReady = useRef(false);\n    const cartCompleted = cartState.matches('cartCompleted');\n    const countryChanged = (cartState.value === 'idle' ||\n        cartState.value === 'error' ||\n        cartState.value === 'cartCompleted') &&\n        countryCode !== cartState?.context?.cart?.buyerIdentity?.countryCode &&\n        !cartState.context.errors;\n    const fetchingFromStorage = useRef(false);\n    /**\n     * Initializes cart with priority in this order:\n     * 1. cart props\n     * 2. localStorage cartId\n     */\n    useEffect(() => {\n        if (!cartReady.current && !fetchingFromStorage.current) {\n            if (!cart && storageAvailable('localStorage')) {\n                fetchingFromStorage.current = true;\n                try {\n                    const cartId = window.localStorage.getItem(CART_ID_STORAGE_KEY);\n                    if (cartId) {\n                        cartSend({ type: 'CART_FETCH', payload: { cartId } });\n                    }\n                }\n                catch (error) {\n                    console.warn('error fetching cartId');\n                    console.warn(error);\n                }\n            }\n            cartReady.current = true;\n        }\n    }, [cart, cartReady, cartSend]);\n    // Update cart country code if cart and props countryCode's as different\n    useEffect(() => {\n        if (!countryChanged || customerOverridesCountryCode.current)\n            return;\n        cartSend({\n            type: 'BUYER_IDENTITY_UPDATE',\n            payload: { buyerIdentity: { countryCode, customerAccessToken } },\n        });\n    }, [\n        countryCode,\n        customerAccessToken,\n        countryChanged,\n        customerOverridesCountryCode,\n        cartSend,\n    ]);\n    // send cart events when ready\n    const onCartReadySend = useCallback((cartEvent) => {\n        if (!cartReady.current) {\n            return console.warn(\"Cart isn't ready yet\");\n        }\n        cartSend(cartEvent);\n    }, [cartSend]);\n    // save cart id to local storage\n    useEffect(() => {\n        if (cartState?.context?.cart?.id && storageAvailable('localStorage')) {\n            try {\n                window.localStorage.setItem(CART_ID_STORAGE_KEY, cartState.context.cart?.id);\n            }\n            catch (error) {\n                console.warn('Failed to save cartId to localStorage', error);\n            }\n        }\n    }, [cartState?.context?.cart?.id]);\n    // delete cart from local storage if cart fetched has been completed\n    useEffect(() => {\n        if (cartCompleted && storageAvailable('localStorage')) {\n            try {\n                window.localStorage.removeItem(CART_ID_STORAGE_KEY);\n            }\n            catch (error) {\n                console.warn('Failed to delete cartId from localStorage', error);\n            }\n        }\n    }, [cartCompleted]);\n    const cartCreate = useCallback((cartInput) => {\n        if (countryCode && !cartInput.buyerIdentity?.countryCode) {\n            if (cartInput.buyerIdentity == null) {\n                cartInput.buyerIdentity = {};\n            }\n            cartInput.buyerIdentity.countryCode = countryCode;\n        }\n        if (customerAccessToken &&\n            !cartInput.buyerIdentity?.customerAccessToken) {\n            if (cartInput.buyerIdentity == null) {\n                cartInput.buyerIdentity = {};\n            }\n            cartInput.buyerIdentity.customerAccessToken = customerAccessToken;\n        }\n        onCartReadySend({\n            type: 'CART_CREATE',\n            payload: cartInput,\n        });\n    }, [countryCode, customerAccessToken, onCartReadySend]);\n    // Delays the cart state in the context if the page is hydrating\n    // preventing suspense boundary errors.\n    const cartDisplayState = useDelayedStateUntilHydration(cartState);\n    const cartContextValue = useMemo(() => {\n        return {\n            ...(cartDisplayState?.context?.cart ?? { lines: [], attributes: [] }),\n            status: transposeStatus(cartDisplayState.value),\n            error: cartDisplayState?.context?.errors,\n            totalQuantity: cartDisplayState?.context?.cart?.totalQuantity ?? 0,\n            cartCreate,\n            linesAdd(lines) {\n                if (cartDisplayState?.context?.cart?.id) {\n                    onCartReadySend({\n                        type: 'CARTLINE_ADD',\n                        payload: { lines },\n                    });\n                }\n                else {\n                    cartCreate({ lines });\n                }\n            },\n            linesRemove(lines) {\n                onCartReadySend({\n                    type: 'CARTLINE_REMOVE',\n                    payload: {\n                        lines,\n                    },\n                });\n            },\n            linesUpdate(lines) {\n                onCartReadySend({\n                    type: 'CARTLINE_UPDATE',\n                    payload: {\n                        lines,\n                    },\n                });\n            },\n            noteUpdate(note) {\n                onCartReadySend({\n                    type: 'NOTE_UPDATE',\n                    payload: {\n                        note,\n                    },\n                });\n            },\n            buyerIdentityUpdate(buyerIdentity) {\n                onCartReadySend({\n                    type: 'BUYER_IDENTITY_UPDATE',\n                    payload: {\n                        buyerIdentity,\n                    },\n                });\n            },\n            cartAttributesUpdate(attributes) {\n                onCartReadySend({\n                    type: 'CART_ATTRIBUTES_UPDATE',\n                    payload: {\n                        attributes,\n                    },\n                });\n            },\n            discountCodesUpdate(discountCodes) {\n                onCartReadySend({\n                    type: 'DISCOUNT_CODES_UPDATE',\n                    payload: {\n                        discountCodes,\n                    },\n                });\n            },\n            cartFragment,\n        };\n    }, [\n        cartCreate,\n        cartDisplayState?.context?.cart,\n        cartDisplayState?.context?.errors,\n        cartDisplayState.value,\n        cartFragment,\n        onCartReadySend,\n    ]);\n    return (React.createElement(CartContext.Provider, { value: cartContextValue }, children));\n}\nfunction transposeStatus(status) {\n    switch (status) {\n        case 'uninitialized':\n        case 'initializationError':\n            return 'uninitialized';\n        case 'idle':\n        case 'cartCompleted':\n        case 'error':\n            return 'idle';\n        case 'cartFetching':\n            return 'fetching';\n        case 'cartCreating':\n            return 'creating';\n        case 'cartLineAdding':\n        case 'cartLineRemoving':\n        case 'cartLineUpdating':\n        case 'noteUpdating':\n        case 'buyerIdentityUpdating':\n        case 'cartAttributesUpdating':\n        case 'discountCodesUpdating':\n            return 'updating';\n    }\n}\n/**\n * Delays a state update until hydration finishes. Useful for preventing suspense boundaries errors when updating a context\n * @remarks this uses startTransition and waits for it to finish.\n */\nfunction useDelayedStateUntilHydration(state) {\n    const [isPending, startTransition] = useTransition();\n    const [delayedState, setDelayedState] = useState(state);\n    const firstTimePending = useRef(false);\n    if (isPending) {\n        firstTimePending.current = true;\n    }\n    const firstTimePendingFinished = useRef(false);\n    if (!isPending && firstTimePending.current) {\n        firstTimePendingFinished.current = true;\n    }\n    useEffect(() => {\n        startTransition(() => {\n            if (!firstTimePendingFinished.current) {\n                setDelayedState(state);\n            }\n        });\n    }, [state]);\n    const displayState = firstTimePendingFinished.current ? state : delayedState;\n    return displayState;\n}\n/** Check for storage availability funciton obtained from\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\n */\nfunction storageAvailable(type) {\n    let storage;\n    try {\n        storage = window[type];\n        const x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    }\n    catch (e) {\n        return (e instanceof DOMException &&\n            // everything except Firefox\n            (e.code === 22 ||\n                // Firefox\n                e.code === 1014 ||\n                // test name field too, because code might not be present\n                // everything except Firefox\n                e.name === 'QuotaExceededError' ||\n                // Firefox\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage &&\n            storage.length !== 0);\n    }\n}\nfunction countryCodeNotUpdated(context, event) {\n    return (event.payload.buyerIdentity.countryCode &&\n        context.cart?.buyerIdentity?.countryCode !==\n            event.payload.buyerIdentity.countryCode);\n}\n// Cart Analytics\nfunction publishCreateAnalytics(context, event) {\n    ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n        addedCartLines: event.payload.lines,\n        cart: context.rawCartResult,\n        prevCart: null,\n    });\n}\nfunction publishLineAddAnalytics(context, event) {\n    ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n        addedCartLines: event.payload.lines,\n        cart: context.rawCartResult,\n        prevCart: context.prevCart,\n    });\n}\nfunction publishLineUpdateAnalytics(context, event) {\n    ClientAnalytics.publish(ClientAnalytics.eventNames.UPDATE_CART, true, {\n        updatedCartLines: event.payload.lines,\n        oldCart: context.prevCart,\n        cart: context.rawCartResult,\n        prevCart: context.prevCart,\n    });\n}\nfunction publishLineRemoveAnalytics(context, event) {\n    ClientAnalytics.publish(ClientAnalytics.eventNames.REMOVE_FROM_CART, true, {\n        removedCartLines: event.payload.lines,\n        cart: context.rawCartResult,\n        prevCart: context.prevCart,\n    });\n}\nfunction publishDiscountCodesUpdateAnalytics(context, event) {\n    ClientAnalytics.publish(ClientAnalytics.eventNames.DISCOUNT_CODE_UPDATED, true, {\n        updatedDiscountCodes: event.payload.discountCodes,\n        cart: context.rawCartResult,\n        prevCart: context.prevCart,\n    });\n}\n"],"names":["useCartActions","numCartLines","cartFragment","countryCode","CountryCode","fetchCart","useCartFetch","cartFetch","useCallback","cartId","CartQuery","cartCreate","cart","CartCreate","cartLineAdd","lines","CartLineAdd","cartLineUpdate","CartLineUpdate","cartLineRemove","CartLineRemove","noteUpdate","note","CartNoteUpdate","buyerIdentityUpdate","buyerIdentity","CartBuyerIdentityUpdate","cartAttributesUpdate","attributes","CartAttributesUpdate","discountCodesUpdate","discountCodes","CartDiscountCodesUpdate","useMemo","invokeCart","action","options","assign","context","_","event","_a","INITIALIZING_CART_EVENTS","cartFromGraphQL","UPDATING_CART_EVENTS","createCartMachine","initialCart","createMachine","useCartAPIStateMachine","onCartActionEntry","onCartActionOptimisticUI","onCartActionComplete","cartMachine","state","send","service","useMachine","data","errors","resultEvent","eventFromFetchResult","_b","isCartActionEvent","isCartFetchResultEvent","flattenConnection","cartActionEvent","CART_ID_STORAGE_KEY","CartProvider","children","onCreate","onLineAdd","onLineRemove","onLineUpdate","onNoteUpdate","onBuyerIdentityUpdate","onAttributesUpdate","onDiscountCodesUpdate","onCreateComplete","onLineAddComplete","onLineRemoveComplete","onLineUpdateComplete","onNoteUpdateComplete","onBuyerIdentityUpdateComplete","onAttributesUpdateComplete","onDiscountCodesUpdateComplete","defaultCartFragment","customerAccessToken","Us","toUpperCase","prevCountryCode","setPrevCountryCode","useState","prevCustomerAccessToken","setPrevCustomerAccessToken","customerOverridesCountryCode","useRef","current","type","error","console","filter","id","payload","includes","map","line","updatedLine","find","quantity","publishCreateAnalytics","publishLineAddAnalytics","publishLineRemoveAnalytics","publishLineUpdateAnalytics","countryCodeNotUpdated","publishDiscountCodesUpdateAnalytics","cartState","cartSend","cartReady","cartCompleted","matches","countryChanged","value","fetchingFromStorage","useEffect","storageAvailable","window","localStorage","getItem","warn","onCartReadySend","cartEvent","setItem","removeItem","cartInput","cartDisplayState","useDelayedStateUntilHydration","cartContextValue","status","transposeStatus","totalQuantity","linesAdd","linesRemove","linesUpdate","_jsx","CartContext","isPending","startTransition","useTransition","delayedState","setDelayedState","firstTimePending","firstTimePendingFinished","storage","x","e","DOMException","code","name","length","ClientAnalytics","publish","eventNames","ADD_TO_CART","addedCartLines","rawCartResult","prevCart","UPDATE_CART","updatedCartLines","oldCart","REMOVE_FROM_CART","removedCartLines","DISCOUNT_CODE_UPDATED","updatedDiscountCodes"],"mappings":"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"}